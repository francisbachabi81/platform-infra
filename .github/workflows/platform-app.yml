name: env-deploy
run-name: ${{ format('{0}-{1}-{2} {3}', github.workflow, inputs.product, inputs.env, (inputs.destroy && 'destroy' || (inputs.apply && 'apply' || 'plan'))) }}

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Environment to deploy"
        type: choice
        options: [dev, qa, uat, prod]
        default: dev
      product:
        description: "Product (hrz = Azure Gov, pub = Azure Commercial)"
        type: choice
        options: [hrz, pub]
        default: hrz
      apply:
        description: "Apply changes"
        type: boolean
        default: false
      destroy:
        description: "Destroy resources (danger)"
        type: boolean
        default: false
      terraform_version:
        description: "Terraform version"
        type: string
        default: "1.13.3"

permissions:
  id-token: write
  contents: read

# OIDC enabled; client-id/tenant/subscription selected dynamically below
env:
  ARM_USE_OIDC: true

jobs:
  terraform:
    name: "Terraform (platform-app: ${{ inputs.env }}.${{ inputs.product }})"
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    defaults:
      run:
        working-directory: stacks/platform-app

    steps:
      - uses: actions/checkout@v4

      # Select cloud, tenant, subscription, and client-id based on product×env (Option A)
      - name: Select cloud/tenant/subscription/client-id
        id: subsel
        shell: bash
        run: |
          set -euo pipefail
          ENV="${{ inputs.env }}"          # dev|qa|uat|prod
          PRODUCT="${{ inputs.product }}"  # hrz|pub

          if [ "$PRODUCT" = "hrz" ]; then
            CLOUD_ENV="AzureUSGovernment"
            ARM_ENV="usgovernment"
            TENANT="${{ secrets.AZ_TENANT_HRZ }}"
            CLIENT_ID="${{ secrets.AZURE_CLIENT_ID_HRZ }}"
            case "$ENV" in
              dev)  SUB="${{ secrets.AZ_SUB_HRZ_DEV }}";;
              qa)   SUB="${{ secrets.AZ_SUB_HRZ_QA }}";;
              uat)  SUB="${{ secrets.AZ_SUB_HRZ_UAT }}";;
              prod) SUB="${{ secrets.AZ_SUB_HRZ_PROD }}";;
              *) echo "Unknown env: $ENV"; exit 1;;
            esac
          else
            CLOUD_ENV="AzureCloud"
            ARM_ENV="public"
            TENANT="${{ secrets.AZ_TENANT_PUB }}"
            CLIENT_ID="${{ secrets.AZURE_CLIENT_ID_PUB }}"
            case "$ENV" in
              dev)  SUB="${{ secrets.AZ_SUB_PUB_DEV }}";;
              qa)   SUB="${{ secrets.AZ_SUB_PUB_QA }}";;
              uat)  SUB="${{ secrets.AZ_SUB_PUB_UAT }}";;
              prod) SUB="${{ secrets.AZ_SUB_PUB_PROD }}";;
              *) echo "Unknown env: $ENV"; exit 1;;
            esac
          fi

          echo "CLOUD_ENV=$CLOUD_ENV" >> $GITHUB_OUTPUT
          echo "ARM_ENV=$ARM_ENV"     >> $GITHUB_OUTPUT
          echo "TENANT=$TENANT"       >> $GITHUB_OUTPUT
          echo "SUB=$SUB"             >> $GITHUB_OUTPUT
          echo "CLIENT_ID=$CLIENT_ID" >> $GITHUB_OUTPUT

          # Export for provider & Terraform variables
          {
            echo "ARM_ENVIRONMENT=$ARM_ENV"
            echo "ARM_TENANT_ID=$TENANT"
            echo "ARM_SUBSCRIPTION_ID=$SUB"
            echo "ARM_CLIENT_ID=$CLIENT_ID"
            echo "TF_VAR_tenant_id=$TENANT"
            echo "TF_VAR_subscription_id=$SUB"
          } >> $GITHUB_ENV

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id:       ${{ steps.subsel.outputs.CLIENT_ID }}
          tenant-id:       ${{ steps.subsel.outputs.TENANT }}
          subscription-id: ${{ steps.subsel.outputs.SUB }}
          environment:     ${{ steps.subsel.outputs.CLOUD_ENV }}

      # Resolve tfvars and choose backend (state split by product)
      - name: Resolve tfvars & backend
        id: paths
        shell: bash
        run: |
          set -euo pipefail
          ENV="${{ inputs.env }}"
          PRODUCT="${{ inputs.product }}"

          # Prefer env.product.tfvars; fallback to env.tfvars
          TV1="${GITHUB_WORKSPACE}/stacks/platform-app/tfvars/${ENV}.${PRODUCT}.tfvars"
          TVFALLBACK="${GITHUB_WORKSPACE}/stacks/platform-app/tfvars/${ENV}.tfvars"
          if [ -f "$TV1" ]; then
            TFVARS_PATH="$TV1"
          elif [ -f "$TVFALLBACK" ]; then
            TFVARS_PATH="$TVFALLBACK"
          else
            echo "❌ Missing tfvars: $TV1 (or fallback $TVFALLBACK)"; exit 1
          fi
          echo "TFVARS_PATH=$TFVARS_PATH" >> "$GITHUB_OUTPUT"

          # Backend by product (Commercial default)
          STATE_RG="rg-core-infra-state-com"
          STATE_SA="sacoretfstateinfra-com"
          if [ "$PRODUCT" != "pub" ]; then
            STATE_RG="rg-core-infra-state-gov"
            STATE_SA="sacoretfstateinfra-gov"
          fi

          # Per-stack key pattern: product/env to avoid collisions
          STATE_KEY="platform-app/${PRODUCT}/${ENV}/terraform.tfstate"

          echo "STATE_RG=$STATE_RG"   >> "$GITHUB_OUTPUT"
          echo "STATE_SA=$STATE_SA"   >> "$GITHUB_OUTPUT"
          echo "STATE_KEY=$STATE_KEY" >> "$GITHUB_OUTPUT"

          echo "Selected tfvars: $TFVARS_PATH"
          echo "Backend: $STATE_RG / $STATE_SA ($STATE_KEY)"

      - name: Check optional secrets
        shell: bash
        run: |
          [ -n "${{ secrets.PG_ADMIN_PASSWORD }}" ]    && echo "PG_ADMIN_PASSWORD: set"    || echo "PG_ADMIN_PASSWORD: empty"
          [ -n "${{ secrets.CDBPG_ADMIN_PASSWORD }}" ] && echo "CDBPG_ADMIN_PASSWORD: set" || echo "CDBPG_ADMIN_PASSWORD: empty"

      - name: Mask secrets
        shell: bash
        run: |
          [ -n "${{ secrets.PG_ADMIN_PASSWORD }}" ]    && echo "::add-mask::${{ secrets.PG_ADMIN_PASSWORD }}"
          [ -n "${{ secrets.CDBPG_ADMIN_PASSWORD }}" ] && echo "::add-mask::${{ secrets.CDBPG_ADMIN_PASSWORD }}"

      - name: Export TF_VAR_* from secrets
        shell: bash
        run: |
          set -euo pipefail
          write_env () {
            name="$1"; value="$2"
            [ -z "$value" ] && return 0
            {
              echo "${name}<<EOF"
              printf '%s\n' "$value"
              echo "EOF"
            } >> "$GITHUB_ENV"
            echo "Exported $name"
          }
          write_env "TF_VAR_pg_admin_password"    "${{ secrets.PG_ADMIN_PASSWORD }}"
          write_env "TF_VAR_cdbpg_admin_password" "${{ secrets.CDBPG_ADMIN_PASSWORD }}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform Init
        run: |
          terraform init -input=false -reconfigure \
            -backend-config="resource_group_name=${{ steps.paths.outputs.STATE_RG }}" \
            -backend-config="storage_account_name=${{ steps.paths.outputs.STATE_SA }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=${{ steps.paths.outputs.STATE_KEY }}" \
            -backend-config="use_azuread_auth=true"

      - name: Terraform Fmt
        run: terraform fmt -recursive

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        if: ${{ !inputs.destroy }}
        run: |
          terraform plan -input=false -lock-timeout=5m \
            -var-file="${{ steps.paths.outputs.TFVARS_PATH }}" \
            -var "product=${{ inputs.product }}" \
            -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Upload plan
        if: ${{ !inputs.destroy }}
        uses: actions/upload-artifact@v4
        with:
          name: platform-app-tfplan-${{ github.run_id }}
          if-no-files-found: error
          path: |
            ${{ github.workspace }}/stacks/platform-app/tfplan
            ${{ github.workspace }}/stacks/platform-app/plan.txt

      - name: Terraform Apply
        if: ${{ inputs.apply && !inputs.destroy }}
        run: terraform apply -auto-approve tfplan

      - name: Terraform Destroy (danger)
        if: ${{ inputs.destroy }}
        run: |
          terraform destroy -auto-approve -lock-timeout=5m \
            -var-file="${{ steps.paths.outputs.TFVARS_PATH }}" \
            -var "product=${{ inputs.product }}"
