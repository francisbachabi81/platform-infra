name: 03-platform-apps-deploy
run-name: ${{ format('{0}-{1}-{2} {3}', github.workflow, inputs.product, inputs.env, (inputs.destroy && 'destroy' || (inputs.apply && 'apply' || 'plan'))) }}

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Environment (dev, qa, uat, prod) or plane (np, pr)"
        type: choice
        options: [dev, qa, uat, prod, np, pr]
        default: dev
      product:
        description: "Product (hrz = Azure Gov, pub = Azure Commercial)"
        type: choice
        options: [hrz, pub]
        default: hrz
      apply:
        description: "Apply changes"
        type: boolean
        default: false
      destroy:
        description: "Destroy resources (danger)"
        type: boolean
        default: false
      confirm_destroy:
        description: "Type: I understand this will destroy production"
        type: string
        default: ""
      terraform_version:
        description: "Terraform version"
        type: string
        default: "1.13.3"
  push:
    branches: [dev, prod]
    paths:
      - "stacks/platform-app/**"
      - "modules/**"
      - ".github/workflows/**"

permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ inputs.product || 'auto' }}-${{ inputs.env || 'na' }}-${{ github.ref }}
  cancel-in-progress: true

env:
  ARM_USE_OIDC: true
  TF_IN_AUTOMATION: true

jobs:
  terraform:
    name: "Terraform (platform-app: ${{ inputs.env }}.${{ inputs.product }})"
    runs-on: ubuntu-latest
    environment: ${{ (inputs.env == 'prod' || inputs.env == 'pr' || inputs.env == 'uat') && 'prod' || 'nonprod' }}
    defaults:
      run:
        working-directory: stacks/platform-app

    steps:
      - uses: actions/checkout@v4

      - name: Select cloud + subscriptions
        id: sel
        shell: bash
        run: |
          set -euo pipefail
          ENV="${{ inputs.env || 'dev' }}"
          PRODUCT="${{ inputs.product || 'hrz' }}"

          case "$ENV" in
            dev|qa|np) PLANE="nonprod" ;;
            uat|prod|pr) PLANE="prod" ;;
            *) echo "Unknown env: $ENV"; exit 1 ;;
          esac

          if [ "$PRODUCT" = "hrz" ]; then
            CLOUD_ENV="AzureUSGovernment"
            ARM_ENV="usgovernment"
            TENANT="${{ secrets.AZ_TENANT_HRZ }}"
            CLIENT_ID="${{ secrets.AZURE_CLIENT_ID_HRZ }}"
            AUDIENCE="api://AzureADTokenExchangeUSGov"
            STATE_SUB="${{ secrets.AZ_SUB_STATE_HRZ != '' && secrets.AZ_SUB_STATE_HRZ || secrets.AZ_SUB_HRZ_PROD }}"
            if [ "$PLANE" = "prod" ]; then
              TARGET_SUB="${{ secrets.AZ_SUB_HRZ_PROD }}"
            else
              TARGET_SUB="${{ secrets.AZ_SUB_HRZ_NONPROD }}"
            fi
          else
            CLOUD_ENV="AzureCloud"
            ARM_ENV="public"
            TENANT="${{ secrets.AZ_TENANT_PUB }}"
            CLIENT_ID="${{ secrets.AZURE_CLIENT_ID_PUB }}"
            AUDIENCE="api://AzureADTokenExchange"
            STATE_SUB="${{ secrets.AZ_SUB_STATE_PUB != '' && secrets.AZ_SUB_STATE_PUB || secrets.AZ_SUB_PUB_PROD }}"
            if [ "$PLANE" = "prod" ]; then
              TARGET_SUB="${{ secrets.AZ_SUB_PUB_PROD }}"
            else
              TARGET_SUB="${{ secrets.AZ_SUB_PUB_NONPROD }}"
            fi
          fi

          echo "CLOUD_ENV=$CLOUD_ENV"   >> $GITHUB_OUTPUT
          echo "ARM_ENV=$ARM_ENV"       >> $GITHUB_OUTPUT
          echo "TENANT=$TENANT"         >> $GITHUB_OUTPUT
          echo "CLIENT_ID=$CLIENT_ID"   >> $GITHUB_OUTPUT
          echo "AUDIENCE=$AUDIENCE"     >> $GITHUB_OUTPUT
          echo "PLANE=$PLANE"           >> $GITHUB_OUTPUT
          echo "STATE_SUB=$STATE_SUB"   >> $GITHUB_OUTPUT
          echo "TARGET_SUB=$TARGET_SUB" >> $GITHUB_OUTPUT

          {
            echo "ARM_ENVIRONMENT=$ARM_ENV"
            echo "ARM_TENANT_ID=$TENANT"
            echo "ARM_CLIENT_ID=$CLIENT_ID"
            echo "TF_VAR_tenant_id=$TENANT"
            echo "TF_VAR_product=${{ inputs.product || 'hrz' }}"
            echo "TF_VAR_env=$ENV"
            echo "TF_VAR_plane=$PLANE"
            echo "TF_VAR_subscription_id=$TARGET_SUB"
            echo "TF_VAR_hub_tenant_id=$TENANT"
            echo "TF_VAR_hub_subscription_id=$TARGET_SUB"
          } >> $GITHUB_ENV

      - name: Export derived plane to env
        run: echo "PLANE=${{ steps.sel.outputs.PLANE }}" >> $GITHUB_ENV

      - name: Resolve tfvars & backend key
        id: paths
        shell: bash
        run: |
          set -euo pipefail
          ENV="${{ inputs.env || 'dev' }}"
          PRODUCT="${{ inputs.product || 'hrz' }}"

          TV1="${GITHUB_WORKSPACE}/stacks/platform-app/tfvars/${ENV}.${PRODUCT}.tfvars"
          TVFALLBACK="${GITHUB_WORKSPACE}/stacks/platform-app/tfvars/${ENV}.tfvars"
          if [ -f "$TV1" ]; then
            TFVARS_PATH="$TV1"
          elif [ -f "$TVFALLBACK" ]; then
            TFVARS_PATH="$TVFALLBACK"
          else
            echo "❌ Missing tfvars: $TV1 (or fallback $TVFALLBACK)"; exit 1
          fi
          echo "TFVARS_PATH=$TFVARS_PATH" >> "$GITHUB_OUTPUT"

          STATE_RG="rg-core-infra-state"
          STATE_SA="sacoretfstateinfra"
          STATE_CONTAINER="tfstate"
          STATE_KEY="platform-app/${PRODUCT}/${ENV}/terraform.tfstate"

          echo "STATE_RG=$STATE_RG"               >> "$GITHUB_OUTPUT"
          echo "STATE_SA=$STATE_SA"               >> "$GITHUB_OUTPUT"
          echo "STATE_CONTAINER=$STATE_CONTAINER" >> "$GITHUB_OUTPUT"
          echo "STATE_KEY=$STATE_KEY"             >> "$GITHUB_OUTPUT"

      - name: Export optional per-env / hub overrides to TF_VAR_*
        shell: bash
        run: |
          set -euo pipefail
          write_env () {
            local name="$1"; local value="$2"
            if [ -n "$value" ]; then
              {
                echo "${name}<<EOF"
                printf '%s\n' "$value"
                echo "EOF"
              } >> "$GITHUB_ENV"
              echo "[export] set ${name}"
            fi
          }
          PRODUCT="${{ inputs.product || 'hrz' }}"
          if [ "$PRODUCT" = "hrz" ]; then
            write_env TF_VAR_hub_subscription_id "${{ secrets.HUB_SUB_ID_HRZ }}"
            write_env TF_VAR_hub_tenant_id       "${{ secrets.HUB_TENANT_ID_HRZ }}"
          else
            write_env TF_VAR_hub_subscription_id "${{ secrets.HUB_SUB_ID_PUB }}"
            write_env TF_VAR_hub_tenant_id       "${{ secrets.HUB_TENANT_ID_PUB }}"
          fi
          [ -n "${{ secrets.PG_ADMIN_PASSWORD }}" ] && echo "::add-mask::${{ secrets.PG_ADMIN_PASSWORD }}"
          [ -n "${{ secrets.CDBPG_ADMIN_PASSWORD }}" ] && echo "::add-mask::${{ secrets.CDBPG_ADMIN_PASSWORD }}"
          write_env TF_VAR_pg_admin_password    "${{ secrets.PG_ADMIN_PASSWORD }}"
          write_env TF_VAR_cdbpg_admin_password "${{ secrets.CDBPG_ADMIN_PASSWORD }}"

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version || '1.13.3' }}

      - name: Enable TF plugin cache
        run: |
          mkdir -p ~/.terraform.d/plugin-cache
          echo 'plugin_cache_dir = "~/.terraform.d/plugin-cache"' > ~/.terraformrc

      - name: Cache .terraform providers
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            ./.terraform
          key: ${{ runner.os }}-tf-${{ inputs.terraform_version || '1.13.3' }}-${{ hashFiles('**/.terraform.lock.hcl') }}

      - name: Azure Login (state subscription for backend)
        uses: azure/login@v2
        with:
          client-id:       ${{ steps.sel.outputs.CLIENT_ID }}
          tenant-id:       ${{ steps.sel.outputs.TENANT }}
          subscription-id: ${{ steps.sel.outputs.STATE_SUB }}
          environment:     ${{ steps.sel.outputs.CLOUD_ENV }}
          audience:        ${{ steps.sel.outputs.AUDIENCE }}

      - name: Terraform Init (backend in state/prod subscription)
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID:       ${{ steps.sel.outputs.CLIENT_ID }}
          ARM_TENANT_ID:       ${{ steps.sel.outputs.TENANT }}
          ARM_SUBSCRIPTION_ID: ${{ steps.sel.outputs.STATE_SUB }}
          ARM_ENVIRONMENT:     ${{ steps.sel.outputs.ARM_ENV }}
        run: |
          terraform init -input=false -reconfigure \
            -backend-config="environment=${{ steps.sel.outputs.ARM_ENV }}" \
            -backend-config="tenant_id=${{ steps.sel.outputs.TENANT }}" \
            -backend-config="subscription_id=${{ steps.sel.outputs.STATE_SUB }}" \
            -backend-config="resource_group_name=${{ steps.paths.outputs.STATE_RG }}" \
            -backend-config="storage_account_name=${{ steps.paths.outputs.STATE_SA }}" \
            -backend-config="container_name=${{ steps.paths.outputs.STATE_CONTAINER }}" \
            -backend-config="key=${{ steps.paths.outputs.STATE_KEY }}" \
            -backend-config="use_azuread_auth=true"

      - name: Azure Login (target subscription for deploy)
        uses: azure/login@v2
        with:
          client-id:       ${{ steps.sel.outputs.CLIENT_ID }}
          tenant-id:       ${{ steps.sel.outputs.TENANT }}
          subscription-id: ${{ steps.sel.outputs.TARGET_SUB }}
          environment:     ${{ steps.sel.outputs.CLOUD_ENV }}
          audience:        ${{ steps.sel.outputs.AUDIENCE }}

      - name: Terraform Fmt
        run: terraform fmt -recursive

      - name: Terraform Validate
        run: terraform validate

      - name: TFLint
        run: |
          curl -sL https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          tflint --recursive

      - name: Terraform Plan (detailed exit code)
        if: ${{ !inputs.destroy }}
        id: plan
        run: |
          set -e
          terraform plan -input=false -lock-timeout=5m \
            -var-file="${{ steps.paths.outputs.TFVARS_PATH }}" \
            -var "product=${{ inputs.product }}" \
            -var "env=${{ inputs.env }}" \
            -detailed-exitcode -out=tfplan || exitcode=$?
          echo "exitcode=${exitcode:-0}" >> $GITHUB_OUTPUT
          terraform show -no-color tfplan > plan.txt

      - name: Upload plan
        if: ${{ !inputs.destroy }}
        uses: actions/upload-artifact@v4
        with:
          name: platform-app-tfplan-${{ github.run_id }}
          if-no-files-found: error
          path: |
            ${{ github.workspace }}/stacks/platform-app/tfplan
            ${{ github.workspace }}/stacks/platform-app/plan.txt

      - name: Fail if plan errored
        if: steps.plan.outputs.exitcode == '1'
        run: |
          echo "Terraform plan returned exit code 1 (error)."
          exit 1

      - name: Require clean plan on prod branch
        if: ${{ github.ref == 'refs/heads/prod' && steps.plan.outputs.exitcode != '0' && !inputs.apply }}
        run: |
          echo "Non-clean plan on prod branch. Manual approval/apply required."
          exit 1

      - name: Terraform Apply (gated via env approvals)
        if: ${{ inputs.apply && !inputs.destroy && steps.plan.outputs.exitcode != '1' }}
        run: terraform apply -auto-approve tfplan

      - name: Guard prod destroy
        if: ${{ inputs.destroy && env.PLANE == 'prod' }}
        run: |
          test "${{ inputs.confirm_destroy }}" = "I understand this will destroy production" || \
            (echo "Missing/incorrect destroy confirmation" && exit 1)

      - name: Terraform Destroy (danger)
        if: ${{ inputs.destroy }}
        run: |
          terraform destroy -auto-approve -lock-timeout=5m \
            -var-file="${{ steps.paths.outputs.TFVARS_PATH }}" \
            -var "product=${{ inputs.product }}" \
            -var "env=${{ inputs.env }}"
