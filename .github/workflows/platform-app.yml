name: 03-platform-apps-deploy
run-name: ${{ format('{0}-{1}-{2} {3}', github.workflow, inputs.product, inputs.env, (inputs.destroy && 'destroy' || (inputs.apply && 'apply' || 'plan'))) }}

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Environment (dev, qa, uat, prod) or plane (np, pr)"
        type: choice
        options: [dev, qa, uat, prod, np, pr]
        default: dev
      product:
        description: "Product (hrz = Azure Gov, pub = Azure Commercial)"
        type: choice
        options: [hrz, pub]
        default: hrz
      apply:
        description: "Apply changes"
        type: boolean
        default: false
      destroy:
        description: "Destroy resources (danger)"
        type: boolean
        default: false
      terraform_version:
        description: "Terraform version"
        type: string
        default: "1.13.3"

permissions:
  id-token: write
  contents: read

env:
  ARM_USE_OIDC: true
  TF_IN_AUTOMATION: true

jobs:
  terraform:
    name: "Terraform (platform-app: ${{ inputs.env }}.${{ inputs.product }})"
    runs-on: ubuntu-latest
    environment: ${{ inputs.env == 'np' && 'nonprod' || inputs.env == 'pr' && 'prod' || inputs.env }}
    defaults:
      run:
        working-directory: stacks/platform-app

    steps:
      - uses: actions/checkout@v4

      # Decide cloud + audience + TENANT:
      # STATE_SUB  = prod (or dedicated) sub for backend state in SAME CLOUD
      # TARGET_SUB = deploy subscription based on plane (derived from env) in SAME CLOUD
      - name: Select cloud + subscriptions
        id: sel
        shell: bash
        run: |
          set -euo pipefail

          ENV="${{ inputs.env }}"
          PRODUCT="${{ inputs.product }}"

          # Derive plane from env (np/pr supported explicitly)
          case "$ENV" in
            dev|qa|np) PLANE="nonprod" ;;
            uat|prod|pr) PLANE="prod" ;;
            *) echo "Unknown env: $ENV"; exit 1 ;;
          esac

          if [ "$PRODUCT" = "hrz" ]; then
            CLOUD_ENV="AzureUSGovernment"
            ARM_ENV="usgovernment"
            TENANT="${{ secrets.AZ_TENANT_HRZ }}"
            CLIENT_ID="${{ secrets.AZURE_CLIENT_ID_HRZ }}"
            AUDIENCE="api://AzureADTokenExchangeUSGov"

            # State sub: prefer dedicated, fallback to HRZ PROD
            STATE_SUB="${{ secrets.AZ_SUB_STATE_HRZ != '' && secrets.AZ_SUB_STATE_HRZ || secrets.AZ_SUB_HRZ_PROD }}"

            # Target sub by plane
            if [ "$PLANE" = "prod" ]; then
              TARGET_SUB="${{ secrets.AZ_SUB_HRZ_PROD }}"
            else
              TARGET_SUB="${{ secrets.AZ_SUB_HRZ_NONPROD }}"
            fi
          else
            CLOUD_ENV="AzureCloud"
            ARM_ENV="public"
            TENANT="${{ secrets.AZ_TENANT_PUB }}"
            CLIENT_ID="${{ secrets.AZURE_CLIENT_ID_PUB }}"
            AUDIENCE="api://AzureADTokenExchange"

            # State sub: prefer dedicated, fallback to PUB PROD
            STATE_SUB="${{ secrets.AZ_SUB_STATE_PUB != '' && secrets.AZ_SUB_STATE_PUB || secrets.AZ_SUB_PUB_PROD }}"

            # Target sub by plane
            if [ "$PLANE" = "prod" ]; then
              TARGET_SUB="${{ secrets.AZ_SUB_PUB_PROD }}"
            else
              TARGET_SUB="${{ secrets.AZ_SUB_PUB_NONPROD }}"
            fi
          fi

          echo "CLOUD_ENV=$CLOUD_ENV"   >> $GITHUB_OUTPUT
          echo "ARM_ENV=$ARM_ENV"       >> $GITHUB_OUTPUT
          echo "TENANT=$TENANT"         >> $GITHUB_OUTPUT
          echo "CLIENT_ID=$CLIENT_ID"   >> $GITHUB_OUTPUT
          echo "AUDIENCE=$AUDIENCE"     >> $GITHUB_OUTPUT
          echo "PLANE=$PLANE"           >> $GITHUB_OUTPUT
          echo "STATE_SUB=$STATE_SUB"   >> $GITHUB_OUTPUT
          echo "TARGET_SUB=$TARGET_SUB" >> $GITHUB_OUTPUT

          {
            # Defaults for providers (we’ll switch login later)
            echo "ARM_ENVIRONMENT=$ARM_ENV"
            echo "ARM_TENANT_ID=$TENANT"
            echo "ARM_CLIENT_ID=$CLIENT_ID"

            # Terraform variables for the stack
            echo "TF_VAR_tenant_id=$TENANT"
            echo "TF_VAR_product=${{ inputs.product }}"
            echo "TF_VAR_env=$ENV"
            # If your modules expect a plane var, export one too
            echo "TF_VAR_plane=$PLANE"
            # Use TARGET_SUB for actual deployment/providers
            echo "TF_VAR_subscription_id=$TARGET_SUB"
            # Default hub_* to TARGET_SUB (caller may override via tfvars)
            echo "TF_VAR_hub_tenant_id=$TENANT"
            echo "TF_VAR_hub_subscription_id=$TARGET_SUB"
          } >> $GITHUB_ENV

      - name: Validate required auth settings
        shell: bash
        env:
          CLIENT_ID:   ${{ steps.sel.outputs.CLIENT_ID }}
          TENANT:      ${{ steps.sel.outputs.TENANT }}
          STATE_SUB:   ${{ steps.sel.outputs.STATE_SUB }}
          TARGET_SUB:  ${{ steps.sel.outputs.TARGET_SUB }}
          CLOUD_ENV:   ${{ steps.sel.outputs.CLOUD_ENV }}
          AUDIENCE:    ${{ steps.sel.outputs.AUDIENCE }}
        run: |
          set -euo pipefail
          : "${CLIENT_ID:?Missing CLIENT_ID}"
          : "${TENANT:?Missing TENANT}"
          : "${STATE_SUB:?Missing STATE_SUB}"
          : "${TARGET_SUB:?Missing TARGET_SUB}"
          : "${CLOUD_ENV:?Missing CLOUD_ENV}"
          : "${AUDIENCE:?Missing AUDIENCE}"
          echo "Auth inputs validated."

      - name: Resolve tfvars & backend key
        id: paths
        shell: bash
        run: |
          set -euo pipefail
          ENV="${{ inputs.env }}"
          PRODUCT="${{ inputs.product }}"

          # prefer env.product.tfvars; fallback env.tfvars
          TV1="${GITHUB_WORKSPACE}/stacks/platform-app/tfvars/${ENV}.${PRODUCT}.tfvars"
          TVFALLBACK="${GITHUB_WORKSPACE}/stacks/platform-app/tfvars/${ENV}.tfvars"
          if [ -f "$TV1" ]; then
            TFVARS_PATH="$TV1"
          elif [ -f "$TVFALLBACK" ]; then
            TFVARS_PATH="$TVFALLBACK"
          else
            echo "❌ Missing tfvars: $TV1 (or fallback $TVFALLBACK)"; exit 1
          fi
          echo "TFVARS_PATH=$TFVARS_PATH" >> "$GITHUB_OUTPUT"

          # Same names in both clouds
          STATE_RG="rg-core-infra-state"
          STATE_SA="sacoretfstateinfra"
          STATE_CONTAINER="tfstate"
          # Key format: platform-app/<product>/<env>/terraform.tfstate
          STATE_KEY="platform-app/${PRODUCT}/${ENV}/terraform.tfstate"

          echo "STATE_RG=$STATE_RG"               >> "$GITHUB_OUTPUT"
          echo "STATE_SA=$STATE_SA"               >> "$GITHUB_OUTPUT"
          echo "STATE_CONTAINER=$STATE_CONTAINER" >> "$GITHUB_OUTPUT"
          echo "STATE_KEY=$STATE_KEY"             >> "$GITHUB_OUTPUT"

      - name: Export optional per-env / hub overrides to TF_VAR_*
        shell: bash
        run: |
          set -euo pipefail
          write_env () {
            local name="$1"; local value="$2"
            if [ -n "$value" ]; then
              {
                echo "${name}<<EOF"
                printf '%s\n' "$value"
                echo "EOF"
              } >> "$GITHUB_ENV"
              echo "[export] set ${name}"
            fi
          }
          PRODUCT="${{ inputs.product }}"
          if [ "$PRODUCT" = "hrz" ]; then
            write_env TF_VAR_hub_subscription_id "${{ secrets.HUB_SUB_ID_HRZ }}"
            write_env TF_VAR_hub_tenant_id       "${{ secrets.HUB_TENANT_ID_HRZ }}"
          else
            write_env TF_VAR_hub_subscription_id "${{ secrets.HUB_SUB_ID_PUB }}"
            write_env TF_VAR_hub_tenant_id       "${{ secrets.HUB_TENANT_ID_PUB }}"
          fi
          [ -n "${{ secrets.PG_ADMIN_PASSWORD }}" ] && echo "::add-mask::${{ secrets.PG_ADMIN_PASSWORD }}"
          [ -n "${{ secrets.CDBPG_ADMIN_PASSWORD }}" ] && echo "::add-mask::${{ secrets.CDBPG_ADMIN_PASSWORD }}"
          write_env TF_VAR_pg_admin_password    "${{ secrets.PG_ADMIN_PASSWORD }}"
          write_env TF_VAR_cdbpg_admin_password "${{ secrets.CDBPG_ADMIN_PASSWORD }}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      # 1) Login to SAME CLOUD, but the **STATE** (prod/dedicated) subscription — for backend init
      - name: Azure Login (state subscription for backend)
        uses: azure/login@v2
        with:
          client-id:       ${{ steps.sel.outputs.CLIENT_ID }}
          tenant-id:       ${{ steps.sel.outputs.TENANT }}
          subscription-id: ${{ steps.sel.outputs.STATE_SUB }}
          environment:     ${{ steps.sel.outputs.CLOUD_ENV }}
          audience:        ${{ steps.sel.outputs.AUDIENCE }}

      - name: Terraform Init (backend in state/prod subscription)
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID:       ${{ steps.sel.outputs.CLIENT_ID }}
          ARM_TENANT_ID:       ${{ steps.sel.outputs.TENANT }}
          ARM_SUBSCRIPTION_ID: ${{ steps.sel.outputs.STATE_SUB }}
          ARM_ENVIRONMENT:     ${{ steps.sel.outputs.ARM_ENV }}
        run: |
          terraform init -input=false -reconfigure \
            -backend-config="environment=${{ steps.sel.outputs.ARM_ENV }}" \
            -backend-config="tenant_id=${{ steps.sel.outputs.TENANT }}" \
            -backend-config="subscription_id=${{ steps.sel.outputs.STATE_SUB }}" \
            -backend-config="resource_group_name=${{ steps.paths.outputs.STATE_RG }}" \
            -backend-config="storage_account_name=${{ steps.paths.outputs.STATE_SA }}" \
            -backend-config="container_name=${{ steps.paths.outputs.STATE_CONTAINER }}" \
            -backend-config="key=${{ steps.paths.outputs.STATE_KEY }}" \
            -backend-config="use_azuread_auth=true"

      # 2) Switch login to the **TARGET** subscription for providers (plan/apply)
      - name: Azure Login (target subscription for deploy)
        uses: azure/login@v2
        with:
          client-id:       ${{ steps.sel.outputs.CLIENT_ID }}
          tenant-id:       ${{ steps.sel.outputs.TENANT }}
          subscription-id: ${{ steps.sel.outputs.TARGET_SUB }}
          environment:     ${{ steps.sel.outputs.CLOUD_ENV }}
          audience:        ${{ steps.sel.outputs.AUDIENCE }}

      - name: Terraform Fmt
        run: terraform fmt -recursive

      - name: Terraform Validate
        run: terraform validate

      - name: Import AKS diagnostic setting if it already exists (idempotent)
        if: ${{ inputs.apply && always() }}
        shell: bash
        env:
          # Name format must match your TF local "diag_name"
          # dev/qa => np, uat => uat, prod => pr
          DIAG_NAME: diag-${{ inputs.product }}-${{ (inputs.env == 'dev' || inputs.env == 'qa') && 'np' || (inputs.env == 'uat' && 'uat' || 'pr') }}-${{ vars.REGION_CODE }}
      
          # AKS name must match what the module uses in this stack
          # If your stack uses plane_code for dev (np) and env for others, keep in sync:
          AKS_NAME: ${{ (inputs.env == 'dev' || inputs.env == 'qa') && format('aks-{0}-np-{1}-100', inputs.product, vars.REGION_CODE) || format('aks-{0}-{1}-{2}-100', inputs.product, inputs.env, vars.REGION_CODE) }}
      
          # Subscriptions to search for AKS (set these in env/secrets)
          SHARED_NP_SUB_ID: ${{ secrets.AZ_SUB_PUB_NONPROD }}     # or your shared-nonprod sub
          PROD_SUB_ID:       ${{ secrets.AZ_SUB_PUB_PROD }}
          UAT_SUB_ID:        ${{ secrets.AZ_SUB_PUB_UAT }}
      
          # Pick the correct sub by env (dev -> shared nonprod, uat/prod -> their subs)
          AKS_SUB_ID: ${{ inputs.env == 'dev' && env.SHARED_NP_SUB_ID || inputs.env == 'uat' && env.UAT_SUB_ID || env.PROD_SUB_ID }}
      
          # The Terraform address of the diagnostic resource in this repo
          # Must match the resource blocks in your TF (aks_shared_nonprod | aks_uat | aks_prod)
          TF_ADDR: ${{ inputs.env == 'dev' && 'azurerm_monitor_diagnostic_setting.aks_shared_nonprod[0]' || inputs.env == 'uat' && 'azurerm_monitor_diagnostic_setting.aks_uat[0]' || 'azurerm_monitor_diagnostic_setting.aks_prod[0]' }}
        run: |
          set -euo pipefail
      
          echo "Diag name:        $DIAG_NAME"
          echo "AKS name:         $AKS_NAME"
          echo "AKS subscription: $AKS_SUB_ID"
          echo "TF address:       $TF_ADDR"
      
          # If it's already in state, skip.
          if terraform state list | grep -q "^${TF_ADDR}\$"; then
            echo "➡️  ${TF_ADDR} already in state; skipping import."
            exit 0
          fi
      
          # Find the AKS resource ID in the right subscription
          az account set -s "$AKS_SUB_ID"
          AKS_ID=$(az aks list --query "[?name=='${AKS_NAME}'].id | [0]" -o tsv || true)
      
          if [ -z "${AKS_ID}" ]; then
            echo "ℹ️  AKS '${AKS_NAME}' not found in sub ${AKS_SUB_ID}. Nothing to import."
            exit 0
          fi
      
          IMPORT_ID="${AKS_ID}|${DIAG_NAME}"
          echo "Import id: $IMPORT_ID"
      
          # Try import; if the diag setting with this name doesn't exist yet in Azure,
          # this will fail harmlessly — we ignore the exit status and let TF create it.
          set +e
          terraform import "${TF_ADDR}" "${IMPORT_ID}"
          RC=$?
          set -e
      
          if [ $RC -ne 0 ]; then
            echo "ℹ️  Import failed (likely no existing diag setting named '${DIAG_NAME}'); Terraform will create it."
          else
            echo "✅  Imported ${TF_ADDR}"
          fi

      - name: Terraform Plan
        if: ${{ !inputs.destroy }}
        run: |
          terraform plan -input=false -lock-timeout=5m \
            -var-file="${{ steps.paths.outputs.TFVARS_PATH }}" \
            -var "product=${{ inputs.product }}" \
            -var "env=${{ inputs.env }}" \
            -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Upload plan
        if: ${{ !inputs.destroy }}
        uses: actions/upload-artifact@v4
        with:
          name: platform-app-tfplan-${{ github.run_id }}
          if-no-files-found: error
          path: |
            ${{ github.workspace }}/stacks/platform-app/tfplan
            ${{ github.workspace }}/stacks/platform-app/plan.txt

      - name: Terraform Apply
        if: ${{ inputs.apply && !inputs.destroy }}
        run: terraform apply -auto-approve tfplan

      - name: Terraform Destroy (danger)
        if: ${{ inputs.destroy }}
        run: |
          terraform destroy -auto-approve -lock-timeout=5m \
            -var-file="${{ steps.paths.outputs.TFVARS_PATH }}" \
            -var "product=${{ inputs.product }}" \
            -var "env=${{ inputs.env }}"
