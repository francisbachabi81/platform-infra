name: env-deploy
run-name: ${{ format('{0}-{1}-{2} {3}', github.workflow, inputs.product, inputs.env, (inputs.destroy && 'destroy' || (inputs.apply && 'apply' || 'plan'))) }}

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Environment (dev, qa, uat, prod) or plane (np, pr)"
        type: choice
        options: [dev, qa, uat, prod, np, pr]
        default: dev
      product:
        description: "Product (hrz = Azure Gov, pub = Azure Commercial)"
        type: choice
        options: [hrz, pub]
        default: hrz
      apply:
        description: "Apply changes"
        type: boolean
        default: false
      destroy:
        description: "Destroy resources (danger)"
        type: boolean
        default: false
      terraform_version:
        description: "Terraform version"
        type: string
        default: "1.13.3"

permissions:
  id-token: write
  contents: read

env:
  ARM_USE_OIDC: true

jobs:
  terraform:
    name: "Terraform (platform-app: ${{ inputs.env }}.${{ inputs.product }})"
    runs-on: ubuntu-latest
    environment: ${{ inputs.env == 'np' && 'nonprod' || inputs.env == 'pr' && 'prod' || inputs.env }}
    defaults:
      run:
        working-directory: stacks/platform-app

    steps:
      - uses: actions/checkout@v4

      - name: Select cloud/tenant/subscription for Azure Login
        id: subsel
        shell: bash
        run: |
          set -euo pipefail
          ENV="${{ inputs.env }}"
          PRODUCT="${{ inputs.product }}"

          # Resolve PLANE from ENV (np/pr) or env mapping
          if [[ "$ENV" == "np" || "$ENV" == "dev" || "$ENV" == "qa" ]]; then
            PLANE="nonprod"
          else
            PLANE="prod"
          fi

          if [ "$PRODUCT" = "hrz" ]; then
            CLOUD_ENV="AzureUSGovernment"
            ARM_ENV="usgovernment"
            TENANT="${{ secrets.AZ_TENANT_HRZ }}"
            CLIENT_ID="${{ secrets.AZURE_CLIENT_ID_HRZ }}"
            AUDIENCE="api://AzureADTokenExchangeUSGov"
            if [ "$PLANE" = "nonprod" ]; then
              SUB="${{ secrets.AZ_SUB_HRZ_NONPROD }}"
            else
              SUB="${{ secrets.AZ_SUB_HRZ_PROD }}"
            fi
          else
            CLOUD_ENV="AzureCloud"
            ARM_ENV="public"
            TENANT="${{ secrets.AZ_TENANT_PUB }}"
            CLIENT_ID="${{ secrets.AZURE_CLIENT_ID_PUB }}"
            AUDIENCE="api://AzureADTokenExchange"
            if [ "$PLANE" = "nonprod" ]; then
              SUB="${{ secrets.AZ_SUB_PUB_NONPROD }}"
            else
              SUB="${{ secrets.AZ_SUB_PUB_PROD }}"
            fi
          fi

          echo "CLOUD_ENV=$CLOUD_ENV" >> $GITHUB_OUTPUT
          echo "ARM_ENV=$ARM_ENV"     >> $GITHUB_OUTPUT
          echo "TENANT=$TENANT"       >> $GITHUB_OUTPUT
          echo "SUB=$SUB"             >> $GITHUB_OUTPUT
          echo "CLIENT_ID=$CLIENT_ID" >> $GITHUB_OUTPUT
          echo "AUDIENCE=$AUDIENCE"   >> $GITHUB_OUTPUT

          {
            echo "ARM_ENVIRONMENT=$ARM_ENV"
            echo "ARM_TENANT_ID=$TENANT"
            echo "ARM_SUBSCRIPTION_ID=$SUB"
            echo "TF_VAR_tenant_id=$TENANT"
            echo "TF_VAR_subscription_id=$SUB"
            echo "TF_VAR_product=${{ inputs.product }}"
            echo "TF_VAR_env=${{ inputs.env }}"
          } >> $GITHUB_ENV

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id:       ${{ steps.subsel.outputs.CLIENT_ID }}
          tenant-id:       ${{ steps.subsel.outputs.TENANT }}
          subscription-id: ${{ steps.subsel.outputs.SUB }}
          environment:     ${{ steps.subsel.outputs.CLOUD_ENV }}
          audience:        ${{ steps.subsel.outputs.AUDIENCE }}

      - name: Resolve tfvars & backend
        id: paths
        shell: bash
        run: |
          set -euo pipefail
          ENV="${{ inputs.env }}"
          PRODUCT="${{ inputs.product }}"

          # prefer env.product.tfvars; fallback env.tfvars; allow plane (np/pr)
          TV1="${GITHUB_WORKSPACE}/stacks/platform-app/tfvars/${ENV}.${PRODUCT}.tfvars"
          TVFALLBACK="${GITHUB_WORKSPACE}/stacks/platform-app/tfvars/${ENV}.tfvars"
          if [ -f "$TV1" ]; then
            TFVARS_PATH="$TV1"
          elif [ -f "$TVFALLBACK" ]; then
            TFVARS_PATH="$TVFALLBACK"
          else
            echo "❌ Missing tfvars: $TV1 (or fallback $TVFALLBACK)"; exit 1
          fi
          echo "TFVARS_PATH=$TFVARS_PATH" >> "$GITHUB_OUTPUT"

          # State account by product (Commercial default)
          STATE_RG="rg-core-infra-state-com"
          STATE_SA="sacoretfstateinfra-com"
          if [ "$PRODUCT" != "pub" ]; then
            STATE_RG="rg-core-infra-state-gov"
            STATE_SA="sacoretfstateinfra-gov"
          fi

          # Per-stack key: product/env (env may be np/pr)
          STATE_KEY="platform-app/${PRODUCT}/${ENV}/terraform.tfstate"

          echo "STATE_RG=$STATE_RG"   >> "$GITHUB_OUTPUT"
          echo "STATE_SA=$STATE_SA"   >> "$GITHUB_OUTPUT"
          echo "STATE_KEY=$STATE_KEY" >> "$GITHUB_OUTPUT"

          echo "Selected tfvars: $TFVARS_PATH"
          echo "Backend: $STATE_RG / $STATE_SA ($STATE_KEY)"

      - name: Export optional per-env/hub subscription overrides to TF_VAR_*
        shell: bash
        run: |
          set -euo pipefail
          # If you store these as repo/org secrets, export them for Terraform to consume.
          # (If absent, Terraform will fall back to defaults.)
          put() { [ -n "$2" ] && echo "$1=$2" >> "$GITHUB_ENV"; }

          # Hub (plane-shared np/pr)
          put TF_VAR_hub_subscription_id "${{ secrets.HUB_SUB_ID_HRZ && inputs.product == 'hrz' && secrets.HUB_SUB_ID_HRZ || (secrets.HUB_SUB_ID_PUB && inputs.product == 'pub' && secrets.HUB_SUB_ID_PUB) }}"
          put TF_VAR_hub_tenant_id       "${{ secrets.HUB_TENANT_ID || '' }}"

          # Per-env (optional)
          put TF_VAR_dev_subscription_id "${{ secrets.AZ_SUB_${{ inputs.product == 'hrz' && 'HRZ' || 'PUB' }}_DEV }}"
          put TF_VAR_dev_tenant_id       "${{ secrets.AZ_TENANT_${{ inputs.product == 'hrz' && 'HRZ' || 'PUB' }} }}"
          put TF_VAR_qa_subscription_id  "${{ secrets.AZ_SUB_${{ inputs.product == 'hrz' && 'HRZ' || 'PUB' }}_QA }}"
          put TF_VAR_qa_tenant_id        "${{ secrets.AZ_TENANT_${{ inputs.product == 'hrz' && 'HRZ' || 'PUB' }} }}"
          put TF_VAR_uat_subscription_id "${{ secrets.AZ_SUB_${{ inputs.product == 'hrz' && 'HRZ' || 'PUB' }}_UAT }}"
          put TF_VAR_uat_tenant_id       "${{ secrets.AZ_TENANT_${{ inputs.product == 'hrz' && 'HRZ' || 'PUB' }} }}"
          put TF_VAR_prod_subscription_id "${{ secrets.AZ_SUB_${{ inputs.product == 'hrz' && 'HRZ' || 'PUB' }}_PROD }}"
          put TF_VAR_prod_tenant_id      "${{ secrets.AZ_TENANT_${{ inputs.product == 'hrz' && 'HRZ' || 'PUB' }} }}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform Init
        run: |
          terraform init -input=false -reconfigure \
            -backend-config="resource_group_name=${{ steps.paths.outputs.STATE_RG }}" \
            -backend-config="storage_account_name=${{ steps.paths.outputs.STATE_SA }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=${{ steps.paths.outputs.STATE_KEY }}" \
            -backend-config="use_azuread_auth=true"

      - name: Terraform Fmt
        run: terraform fmt -recursive

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        if: ${{ !inputs.destroy }}
        run: |
          terraform plan -input=false -lock-timeout=5m \
            -var-file="${{ steps.paths.outputs.TFVARS_PATH }}" \
            -var "product=${{ inputs.product }}" \
            -var "env=${{ inputs.env }}" \
            -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Upload plan
        if: ${{ !inputs.destroy }}
        uses: actions/upload-artifact@v4
        with:
          name: platform-app-tfplan-${{ github.run_id }}
          if-no-files-found: error
          path: |
            ${{ github.workspace }}/stacks/platform-app/tfplan
            ${{ github.workspace }}/stacks/platform-app/plan.txt

      - name: Terraform Apply
        if: ${{ inputs.apply && !inputs.destroy }}
        run: terraform apply -auto-approve tfplan

      - name: Terraform Destroy (danger)
        if: ${{ inputs.destroy }}
        run: |
          terraform destroy -auto-approve -lock-timeout=5m \
            -var-file="${{ steps.paths.outputs.TFVARS_PATH }}" \
            -var "product=${{ inputs.product }}" \
            -var "env=${{ inputs.env }}"
