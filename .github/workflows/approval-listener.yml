name: approval-listener
on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write
  actions: write
  id-token: write

env:
  APPROVERS_CSV: "francisbachabi81,user2"

jobs:
  gate:
    if: ${{ startsWith(github.event.comment.body, '/approve ') || startsWith(github.event.comment.body, '/reject ') }}
    runs-on: ubuntu-latest
    steps:
      - name: Parse command & runId
        id: parse
        run: |
          cmd="${{ github.event.comment.body }}"
          action="${cmd%% *}"
          runid="${cmd##* }"
          echo "action=$action" >> $GITHUB_OUTPUT
          echo "runid=$runid"   >> $GITHUB_OUTPUT

      - name: Check approver is authorized
        run: |
          IFS=',' read -ra USERS <<< "${APPROVERS_CSV}"
          ok=0; for u in "${USERS[@]}"; do [ "$u" = "${{ github.event.comment.user.login }}" ] && ok=1; done
          [ $ok -eq 1 ] || { echo "Not authorized"; exit 1; }

      - name: Extract stack/product/third from issue title
        id: meta
        run: |
          title='${{ github.event.issue.title }}'
          # Formats you create from the plan step, e.g.:
          #  APPROVAL: shared-network hrz nonprod (run 123456)
          #  APPROVAL: core hrz prod (run 123456)
          #  APPROVAL: platform-app hrz prod (run 123456)
          stack=$(echo "$title" | awk '{print $2}')
          product=$(echo "$title" | awk '{print $3}')
          third=$(echo "$title" | awk '{print $4}')
          echo "stack=$stack"     >> $GITHUB_OUTPUT
          echo "product=$product" >> $GITHUB_OUTPUT
          echo "third=$third"     >> $GITHUB_OUTPUT

      - name: Lookup original plan run (to get branch/ref)
        id: run
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_WORKFLOW }}
          script: |
            const run_id = Number(`${{ steps.parse.outputs.runid }}`);
            const { data: run } = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id
            });
            core.info(`Plan run branch: ${run.head_branch}`);
            core.setOutput('head_branch', run.head_branch);
            core.setOutput('workflow_id', run.workflow_id);
            core.setOutput('event', run.event);
            // Optional safety: block if the plan run is not from this repo
            if (run.repository.full_name !== `${context.repo.owner}/${context.repo.repo}`) {
              core.setFailed('Plan run is from a different repository.');
            }

      - name: Dispatch stack-specific apply workflow (using plan branch)
        if: ${{ steps.parse.outputs.action == '/approve' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_WORKFLOW }}
          script: |
            const stack   = `${{ steps.meta.outputs.stack }}`;
            const product = `${{ steps.meta.outputs.product }}`;
            const third   = `${{ steps.meta.outputs.third }}`; // plane for shared/core, env for platform-app
            const runid   = `${{ steps.parse.outputs.runid }}`;
            const ref     = `${{ steps.run.outputs.head_branch }}`; // dev or main, etc.

            let workflow_id, inputs;
            if (stack === "shared-network") {
              workflow_id = "01-network-apply.yml";
              inputs = { product, plane: third, plan_run_id: runid };
            } else if (stack === "core") {
              workflow_id = "02-core-apply.yml";
              inputs = { product, plane: third, plan_run_id: runid };
            } else if (stack === "platform-app") {
              workflow_id = "03-platform-apply.yml";
              inputs = { product, env: third, plan_run_id: runid };
            } else {
              core.setFailed(`Unknown stack in issue title: ${stack}`);
            }

            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id,
              ref,     // <- branch taken from the plan run (dev for nonprod, main for prod)
              inputs
            });

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `✅ Approved by @${context.actor}. Dispatched **${workflow_id}** on \`${ref}\` (plan run ${runid}).`
            });

      - name: Record rejection
        if: ${{ steps.parse.outputs.action == '/reject' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_WORKFLOW }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `❌ Rejected by @${context.actor}.`
            });
