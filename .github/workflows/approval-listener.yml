name: approval-listener

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write
  actions: write
  id-token: write

env:
  APPROVERS_CSV: "francisbachabi81,user2"
  # Fallback username; prefer setting a secret GH_PAT_ACTOR to the PAT owner login
  PAT_ACTOR: "francisbachabi81"
  SYSTEM_MARKER: "<!-- system:approval-final -->"

concurrency:
  group: approval-listener-${{ github.event.issue.id }}
  cancel-in-progress: true

jobs:
  gate:
    runs-on: ubuntu-latest
    steps:
      # Decide whether to proceed; everything else is gated on this.
      - name: Guard / short-circuit
        id: guard
        shell: bash
        env:
          BODY: ${{ github.event.comment.body }}
          AUTHOR: ${{ github.event.comment.user.login }}
          STATE: ${{ github.event.issue.state }}
          MARK:  ${{ env.SYSTEM_MARKER }}
          # Prefer secret if present, else env fallback
          PAT_OWNER: ${{ secrets.GH_PAT_ACTOR != '' && secrets.GH_PAT_ACTOR || env.PAT_ACTOR }}
        run: |
          set -euo pipefail
          proceed=1

          # must start with "/approve " or "/reject "
          if [[ ! "$BODY" =~ ^/(approve|reject)\  ]]; then proceed=0; fi

          # issue must be open
          [[ "$STATE" == "open" ]] || proceed=0

          # ignore our own final/system comments (contain marker)
          if grep -q "$MARK" <<<"$BODY"; then proceed=0; fi

          # ignore comments authored by the PAT owner (prevents loop on our final comment)
          if [[ -n "${PAT_OWNER:-}" && "$AUTHOR" == "$PAT_OWNER" ]]; then proceed=0; fi

          echo "proceed=$proceed" >> "$GITHUB_OUTPUT"

      - name: Parse command & runId
        id: parse
        if: ${{ steps.guard.outputs.proceed == '1' }}
        run: |
          cmd="${{ github.event.comment.body }}"
          action="${cmd%% *}"
          runid="${cmd##* }"
          echo "action=$action" >> $GITHUB_OUTPUT
          echo "runid=$runid"   >> $GITHUB_OUTPUT

      - name: Check approver is authorized
        if: ${{ steps.guard.outputs.proceed == '1' }}
        run: |
          IFS=',' read -ra USERS <<< "${APPROVERS_CSV}"
          ok=0
          for u in "${USERS[@]}"; do
            [ "$u" = "${{ github.event.comment.user.login }}" ] && ok=1
          done
          [ $ok -eq 1 ] || { echo "Not authorized"; exit 1; }

      - name: Extract stack/product/plane-or-env from issue title
        id: meta
        if: ${{ steps.guard.outputs.proceed == '1' }}
        run: |
          title='${{ github.event.issue.title }}'
          # Formats:
          #   APPROVAL: shared-network hrz nonprod (run 123456789)
          #   APPROVAL: core hrz pr (run 123456789)
          #   APPROVAL: platform-app hrz prod (run 123456789)
          stack=$(echo "$title"  | awk '{print $2}')
          product=$(echo "$title"| awk '{print $3}')
          third=$(echo "$title"  | awk '{print $4}') # plane or env
          echo "stack=$stack"     >> $GITHUB_OUTPUT
          echo "product=$product" >> $GITHUB_OUTPUT
          echo "third=$third"     >> $GITHUB_OUTPUT

      - name: Approve → dispatch apply (with PAT), close, then final comment
        if: ${{ steps.guard.outputs.proceed == '1' && steps.parse.outputs.action == '/approve' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_WORKFLOW }}
          script: |
            const MARK = process.env.SYSTEM_MARKER || '<!-- system:approval-final -->';

            const stack   = `${{ steps.meta.outputs.stack }}`.trim();
            const product = `${{ steps.meta.outputs.product }}`.trim();
            const third   = `${{ steps.meta.outputs.third }}`.trim();   // plane or env
            const runid   = `${{ steps.parse.outputs.runid }}`.trim();

            // Choose workflow + inputs
            let workflow_id, inputs;
            if (stack === "shared-network") {
              workflow_id = "01-network-apply.yml";
              inputs = { product, plane: third, plan_run_id: runid };
            } else if (stack === "core") {
              workflow_id = "02-core-apply.yml";
              inputs = { product, plane: third, plan_run_id: runid };
            } else if (stack === "platform-app") {
              workflow_id = "03-platform-apply.yml";
              inputs = { product, env: third, plan_run_id: runid }; // platform-app uses env
            } else {
              core.setFailed(`Unknown stack in issue title: ${stack}`);
              return;
            }

            // Map plane/env -> branch ref
            const lower = third.toLowerCase();
            let ref = 'main';                                 // default for nonprod/dev/qa/uat
            if (['prod','pr'].includes(lower)) ref = 'main'; // prod → main
            if (['main','dev'].includes(lower)) ref = lower; // explicit override if a branch token is used

            // Dispatch apply workflow on chosen branch
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              workflow_id,
              ref,
              inputs
            });

            // Close FIRST (prevents our final comment from re-triggering)
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.issue.number,
              state: "closed"
            });

            // Final system-marked comment
            const repoUrl     = `https://github.com/${context.repo.owner}/${context.repo.repo}`;
            const planRunUrl  = `${repoUrl}/actions/runs/${runid}`;
            const applyTabUrl = `${repoUrl}/actions/workflows/${workflow_id}`;
            const body = `${MARK}
            ✅ **Approved** by @${context.actor}.
            - Stack: \`${stack}\`
            - Product: \`${product}\`
            - Env/Plane: \`${third}\`
            - Branch ref: \`${ref}\`
            - **Plan run**: ${planRunUrl}
            - **Apply workflow**: ${applyTabUrl}`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.issue.number,
              body
            });

      - name: Reject → close, then final comment
        if: ${{ steps.guard.outputs.proceed == '1' && steps.parse.outputs.action == '/reject' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_WORKFLOW }}
          script: |
            const MARK = process.env.SYSTEM_MARKER || '<!-- system:approval-final -->';

            // Close FIRST
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.issue.number,
              state: "closed"
            });

            const body = `${MARK}
            ❌ **Rejected** by @${context.actor}.`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.issue.number,
              body
            });
