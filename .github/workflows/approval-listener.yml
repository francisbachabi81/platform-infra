name: approval-listener
on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write
  actions: write
  id-token: write

env:
  APPROVERS_CSV: "francisbachabi81,user2"
  # Hidden marker used to ignore system comments (prevents loops)
  SYSTEM_MARKER: "<!-- system:approval-final -->"

jobs:
  gate:
    # Only run on open issues, for /approve or /reject, skip our own/system comments, and skip the Actions bot
    if: >
      github.event.issue.state == 'open' &&
      (startsWith(github.event.comment.body, '/approve ') || startsWith(github.event.comment.body, '/reject ')) &&
      !contains(github.event.comment.body, '<!-- system:approval-final -->') &&
      github.event.comment.user.login != 'github-actions[bot]'
    runs-on: ubuntu-latest

    steps:
      - name: Parse command & runId
        id: parse
        run: |
          cmd="${{ github.event.comment.body }}"
          action="${cmd%% *}"
          runid="${cmd##* }"
          echo "action=$action" >> $GITHUB_OUTPUT
          echo "runid=$runid"   >> $GITHUB_OUTPUT

      - name: Check approver is authorized
        run: |
          IFS=',' read -ra USERS <<< "${APPROVERS_CSV}"
          ok=0; for u in "${USERS[@]}"; do [ "$u" = "${{ github.event.comment.user.login }}" ] && ok=1; done
          [ $ok -eq 1 ] || { echo "Not authorized"; exit 1; }

      - name: Extract stack/product/plane/env from issue title
        id: meta
        run: |
          title='${{ github.event.issue.title }}'
          # Title formats:
          #   APPROVAL: shared-network hrz nonprod (run 123456789)
          #   APPROVAL: core hrz pr (run 123456789)
          #   APPROVAL: platform-app hrz prod (run 123456789)
          stack=$(echo "$title" | awk '{print $2}')
          product=$(echo "$title" | awk '{print $3}')
          third=$(echo "$title" | awk '{print $4}')
          echo "stack=$stack"     >> $GITHUB_OUTPUT
          echo "product=$product" >> $GITHUB_OUTPUT
          echo "third=$third"     >> $GITHUB_OUTPUT

      - name: Dispatch stack-specific apply workflow (with PAT)
        if: ${{ steps.parse.outputs.action == '/approve' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT_WORKFLOW }}
          script: |
            const stack   = `${{ steps.meta.outputs.stack }}`.trim();
            const product = `${{ steps.meta.outputs.product }}`.trim();
            const third   = `${{ steps.meta.outputs.third }}`.trim(); // plane or env
            const runid   = `${{ steps.parse.outputs.runid }}`.trim();

            // Decide workflow file + inputs shape
            let workflow_id, inputs;
            if (stack === "shared-network") {
              workflow_id = "01-network-apply.yml";
              inputs = { product, plane: third, plan_run_id: runid };
            } else if (stack === "core") {
              workflow_id = "02-core-apply.yml";
              inputs = { product, plane: third, plan_run_id: runid };
            } else if (stack === "platform-app") {
              workflow_id = "03-platform-apply.yml";
              // For platform-app the 3rd token is env (dev|qa|uat|prod)
              inputs = { product, env: third, plan_run_id: runid };
            } else {
              core.setFailed(`Unknown stack in issue title: ${stack}`);
              return;
            }

            // Map plane/env -> branch ref
            // Rules:
            // - nonprod plane (or env in {dev,qa,uat}) => 'dev'
            // - prod plane (or env == prod)            => 'main'
            const lower = third.toLowerCase();
            const isNonProdPlane = ['nonprod','np'].includes(lower);
            const isProdPlane    = ['prod','pr'].includes(lower);
            const isNonProdEnv   = ['dev','qa','uat'].includes(lower);
            const isProdEnv      = lower === 'prod';

            let ref = 'dev'; // default safe
            if (isProdPlane || isProdEnv) ref = 'main';
            else if (isNonProdPlane || isNonProdEnv) ref = 'main';
            // (Optional) allow explicit 'main'/'dev' pass-through
            if (['main','dev'].includes(lower)) ref = lower;

            // Kick off the apply workflow on the chosen branch
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              workflow_id,
              ref,
              inputs
            });

            // Build links
            const repoUrl     = `https://github.com/${context.repo.owner}/${context.repo.repo}`;
            const planRunUrl  = `${repoUrl}/actions/runs/${runid}`;
            const applyTabUrl = `${repoUrl}/actions/workflows/${workflow_id}`;

            const body = `${process.env.SYSTEM_MARKER}
            âœ… **Approved** by @${context.actor}.
            - Stack: \`${stack}\`
            - Product: \`${product}\`
            - Env/Plane: \`${third}\`
            - Branch ref: \`${ref}\`
            - **Plan run**: ${planRunUrl}
            - **Apply workflow**: ${applyTabUrl}

            This issue is now closed.`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.issue.number,
              body
            });

            // Close to prevent more approvals; avoids loops with the SYSTEM_MARKER too
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              issue_number: context.issue.number,
              state: "closed"
            });
