name: "üöÄ Apply | Core Infrastructure"
run-name: "${{ format('{0} | {1}-{2} | {3} | #{4}', github.workflow, inputs.product, inputs.plane || inputs.env, github.ref_name, github.run_number) }}"
on:
  workflow_dispatch:
    inputs:
      product:     { type: choice, options: [hrz, pub], required: true }
      plane:       { type: choice, options: [np, pr],   required: true }
      plan_run_id: { type: string, required: true }

permissions:
  id-token: write
  contents: read

env:
  ARM_USE_OIDC: true
  TF_IN_AUTOMATION: true

jobs:
  apply:
    runs-on: ubuntu-latest
    environment: ${{ inputs.plane == 'pr' && 'prod' || 'nonprod' }}
    defaults: { run: { working-directory: stacks/core } }

    steps:
      - uses: actions/checkout@v4

      # (same selection + tfvars as plan)
      - name: Select cloud + subscriptions
        id: sel
        shell: bash
        run: |
          set -euo pipefail
          PLANE="${{ inputs.plane }}"; PRODUCT="${{ inputs.product }}"
          if [ "$PRODUCT" = "hrz" ]; then
            CLOUD_ENV="AzureUSGovernment"; ARM_ENV="usgovernment"
            TENANT="${{ secrets.AZ_TENANT_HRZ }}"; CLIENT_ID="${{ secrets.AZURE_CLIENT_ID_HRZ }}"
            AUDIENCE="api://AzureADTokenExchangeUSGov"
            STATE_SUB="${{ secrets.AZ_SUB_STATE_HRZ != '' && secrets.AZ_SUB_STATE_HRZ || secrets.AZ_SUB_HRZ_PROD }}"
            case "$PLANE" in np) TARGET_SUB="${{ secrets.AZ_SUB_HRZ_NONPROD }}";; pr) TARGET_SUB="${{ secrets.AZ_SUB_HRZ_PROD }}";; esac
          else
            CLOUD_ENV="AzureCloud"; ARM_ENV="public"
            TENANT="${{ secrets.AZ_TENANT_PUB }}"; CLIENT_ID="${{ secrets.AZURE_CLIENT_ID_PUB }}"
            AUDIENCE="api://AzureADTokenExchange"
            STATE_SUB="${{ secrets.AZ_SUB_STATE_PUB != '' && secrets.AZ_SUB_STATE_PUB || secrets.AZ_SUB_PUB_PROD }}"
            case "$PLANE" in np) TARGET_SUB="${{ secrets.AZ_SUB_PUB_NONPROD }}";; pr) TARGET_SUB="${{ secrets.AZ_SUB_PUB_PROD }}";; esac
          fi
          echo "CLOUD_ENV=$CLOUD_ENV"   >> $GITHUB_OUTPUT
          echo "ARM_ENV=$ARM_ENV"       >> $GITHUB_OUTPUT
          echo "TENANT=$TENANT"         >> $GITHUB_OUTPUT
          echo "CLIENT_ID=$CLIENT_ID"   >> $GITHUB_OUTPUT
          echo "AUDIENCE=$AUDIENCE"     >> $GITHUB_OUTPUT
          echo "STATE_SUB=$STATE_SUB"   >> $GITHUB_OUTPUT
          echo "TARGET_SUB=$TARGET_SUB" >> $GITHUB_OUTPUT
          {
            echo "ARM_ENVIRONMENT=$ARM_ENV"
            echo "ARM_TENANT_ID=$TENANT"
            echo "ARM_CLIENT_ID=$CLIENT_ID"
            echo "TF_VAR_tenant_id=$TENANT"
            echo "TF_VAR_product=${PRODUCT}"
            echo "TF_VAR_plane=${PLANE}"
            echo "TF_VAR_subscription_id=$TARGET_SUB"
          } >> $GITHUB_ENV

      - name: Resolve tfvars & backend key
        id: paths
        shell: bash
        run: |
          set -euo pipefail
          PLANE="${{ inputs.plane }}"; PRODUCT="${{ inputs.product }}"
          for p in "${PLANE}.${PRODUCT}" "${PLANE}"; do
            T="${GITHUB_WORKSPACE}/stacks/core/tfvars/${p}.tfvars"
            [ -f "$T" ] && TFVARS_PATH="$T" && break
          done
          [ -f "${TFVARS_PATH:-}" ] || { echo "Missing tfvars"; exit 1; }
          echo "TFVARS_PATH=$TFVARS_PATH" >> "$GITHUB_OUTPUT"
          echo "STATE_RG=rg-core-infra-state"               >> "$GITHUB_OUTPUT"
          echo "STATE_SA=sacoretfstateinfra"               >> "$GITHUB_OUTPUT"
          echo "STATE_CONTAINER=tfstate"                   >> "$GITHUB_OUTPUT"
          echo "STATE_KEY=core/${PRODUCT}/${PLANE}/terraform.tfstate" >> "$GITHUB_OUTPUT"

      - uses: hashicorp/setup-terraform@v3
        with: { terraform_version: "1.13.3" }

      - name: Azure Login (state)
        uses: azure/login@v2
        with:
          client-id:       ${{ steps.sel.outputs.CLIENT_ID }}
          tenant-id:       ${{ steps.sel.outputs.TENANT }}
          subscription-id: ${{ steps.sel.outputs.STATE_SUB }}
          environment:     ${{ steps.sel.outputs.CLOUD_ENV }}
          audience:        ${{ steps.sel.outputs.AUDIENCE }}

      - name: Terraform Init (backend)
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID:       ${{ steps.sel.outputs.CLIENT_ID }}
          ARM_TENANT_ID:       ${{ steps.sel.outputs.TENANT }}
          ARM_SUBSCRIPTION_ID: ${{ steps.sel.outputs.STATE_SUB }}
          ARM_ENVIRONMENT:     ${{ steps.sel.outputs.ARM_ENV }}
        run: |
          terraform init -input=false -reconfigure \
            -backend-config="environment=${{ steps.sel.outputs.ARM_ENV }}" \
            -backend-config="tenant_id=${{ steps.sel.outputs.TENANT }}" \
            -backend-config="subscription_id=${{ steps.sel.outputs.STATE_SUB }}" \
            -backend-config="resource_group_name=${{ steps.paths.outputs.STATE_RG }}" \
            -backend-config="storage_account_name=${{ steps.paths.outputs.STATE_SA }}" \
            -backend-config="container_name=${{ steps.paths.outputs.STATE_CONTAINER }}" \
            -backend-config="key=${{ steps.paths.outputs.STATE_KEY }}" \
            -backend-config="use_azuread_auth=true"

      - name: Azure Login (target)
        uses: azure/login@v2
        with:
          client-id:       ${{ steps.sel.outputs.CLIENT_ID }}
          tenant-id:       ${{ steps.sel.outputs.TENANT }}
          subscription-id: ${{ steps.sel.outputs.TARGET_SUB }}
          environment:     ${{ steps.sel.outputs.CLOUD_ENV }}
          audience:        ${{ steps.sel.outputs.AUDIENCE }}

      ## ---------- Reuse approved tfplan if present ----------
      - name: Download approved plan artifact (best effort)
        id: dl
        uses: dawidd6/action-download-artifact@v6
        continue-on-error: true
        with:
          run_id: ${{ inputs.plan_run_id }}
          name: core-plan-${{ inputs.plan_run_id }}
          path: ${{ github.workspace }}/stacks/core

      - name: Verify plan artifact presence
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "tfplan" ]; then
            echo "has_tfplan=true" >> "$GITHUB_OUTPUT"
            echo "‚úÖ Found approved tfplan artifact"
          else
            echo "has_tfplan=false" >> "$GITHUB_OUTPUT"
            echo "‚ÑπÔ∏è No approved tfplan found; will run safety plan"
            ls -la || true
          fi

      - name: Terraform Apply (approved plan)
        if: ${{ steps.detect.outputs.has_tfplan == 'true' }}
        run: terraform apply -input=false -auto-approve tfplan
