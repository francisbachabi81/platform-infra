name: 02-core-services-deploy
run-name: ${{ format('{0}-{1}-{2} {3}', github.workflow, inputs.product, inputs.plane, (inputs.destroy && 'destroy' || (inputs.apply && 'apply' || 'plan'))) }}

on:
  workflow_dispatch:
    inputs:
      plane:
        description: "Plane (np = dev/qa, pr = uat/prod)"
        type: choice
        options: [np, pr]
        default: np
      product:
        description: "Product (hrz = Azure Gov, pub = Azure Commercial)"
        type: choice
        options: [hrz, pub]
        default: hrz
      apply:
        description: "Apply changes"
        type: boolean
        default: false
      destroy:
        description: "Destroy resources (danger)"
        type: boolean
        default: false
      terraform_version:
        description: "Terraform version"
        type: string
        default: "1.13.3"

permissions:
  id-token: write
  contents: read

env:
  ARM_USE_OIDC: true
  TF_IN_AUTOMATION: true

jobs:
  terraform:
    name: "Terraform (core: ${{ inputs.plane }}.${{ inputs.product }})"
    runs-on: ubuntu-latest
    environment: ${{ inputs.plane == 'np' && 'nonprod' || 'prod' }}
    defaults:
      run:
        working-directory: stacks/core

    steps:
      - uses: actions/checkout@v4

      # Decide cloud + audience + TENANT plus two subs:
      # STATE_SUB = prod subscription (for backend state) in SAME CLOUD
      # TARGET_SUB = deploy subscription (varies by plane) in SAME CLOUD
      - name: Select cloud + subscriptions
        id: sel
        shell: bash
        run: |
          set -euo pipefail
          PLANE="${{ inputs.plane }}"
          PRODUCT="${{ inputs.product }}"

          if [ "$PRODUCT" = "hrz" ]; then
            CLOUD_ENV="AzureUSGovernment"
            ARM_ENV="usgovernment"
            TENANT="${{ secrets.AZ_TENANT_HRZ }}"
            CLIENT_ID="${{ secrets.AZURE_CLIENT_ID_HRZ }}"
            AUDIENCE="api://AzureADTokenExchangeUSGov"

            # State sub: prefer dedicated, fallback to HRZ PROD
            STATE_SUB="${{ secrets.AZ_SUB_STATE_HRZ != '' && secrets.AZ_SUB_STATE_HRZ || secrets.AZ_SUB_HRZ_PROD }}"

            # Target sub by plane
            case "$PLANE" in
              np) TARGET_SUB="${{ secrets.AZ_SUB_HRZ_NONPROD }}";;
              pr) TARGET_SUB="${{ secrets.AZ_SUB_HRZ_PROD }}";;
              *) echo "Unknown plane: $PLANE"; exit 1;;
            esac
          else
            CLOUD_ENV="AzureCloud"
            ARM_ENV="public"
            TENANT="${{ secrets.AZ_TENANT_PUB }}"
            CLIENT_ID="${{ secrets.AZURE_CLIENT_ID_PUB }}"
            AUDIENCE="api://AzureADTokenExchange"

            # State sub: prefer dedicated, fallback to PUB PROD
            STATE_SUB="${{ secrets.AZ_SUB_STATE_PUB != '' && secrets.AZ_SUB_STATE_PUB || secrets.AZ_SUB_PUB_PROD }}"

            # Target sub by plane
            case "$PLANE" in
              np) TARGET_SUB="${{ secrets.AZ_SUB_PUB_NONPROD }}";;
              pr) TARGET_SUB="${{ secrets.AZ_SUB_PUB_PROD }}";;
              *) echo "Unknown plane: $PLANE"; exit 1;;
            esac
          fi

          echo "CLOUD_ENV=$CLOUD_ENV"   >> $GITHUB_OUTPUT
          echo "ARM_ENV=$ARM_ENV"       >> $GITHUB_OUTPUT
          echo "TENANT=$TENANT"         >> $GITHUB_OUTPUT
          echo "CLIENT_ID=$CLIENT_ID"   >> $GITHUB_OUTPUT
          echo "AUDIENCE=$AUDIENCE"     >> $GITHUB_OUTPUT
          echo "STATE_SUB=$STATE_SUB"   >> $GITHUB_OUTPUT
          echo "TARGET_SUB=$TARGET_SUB" >> $GITHUB_OUTPUT

          {
            # Defaults for providers (we’ll switch login later)
            echo "ARM_ENVIRONMENT=$ARM_ENV"
            echo "ARM_TENANT_ID=$TENANT"
            echo "ARM_CLIENT_ID=$CLIENT_ID"

            # Terraform variables for the stack
            echo "TF_VAR_tenant_id=$TENANT"
            echo "TF_VAR_product=${{ inputs.product }}"
            echo "TF_VAR_plane=${{ inputs.plane }}"
            # Use TARGET_SUB for actual deployment/providers
            echo "TF_VAR_subscription_id=$TARGET_SUB"
          } >> $GITHUB_ENV

      - name: Validate required auth settings
        shell: bash
        env:
          CLIENT_ID: ${{ steps.sel.outputs.CLIENT_ID }}
          TENANT: ${{ steps.sel.outputs.TENANT }}
          STATE_SUB: ${{ steps.sel.outputs.STATE_SUB }}
          TARGET_SUB: ${{ steps.sel.outputs.TARGET_SUB }}
          CLOUD_ENV: ${{ steps.sel.outputs.CLOUD_ENV }}
          AUDIENCE: ${{ steps.sel.outputs.AUDIENCE }}
        run: |
          set -euo pipefail
          : "${CLIENT_ID:?Missing CLIENT_ID}"
          : "${TENANT:?Missing TENANT}"
          : "${STATE_SUB:?Missing STATE_SUB}"
          : "${TARGET_SUB:?Missing TARGET_SUB}"
          : "${CLOUD_ENV:?Missing CLOUD_ENV}"
          : "${AUDIENCE:?Missing AUDIENCE}"
          echo "Auth inputs validated."

      - name: Resolve tfvars & backend key
        id: paths
        shell: bash
        run: |
          set -euo pipefail
          PLANE="${{ inputs.plane }}"
          PRODUCT="${{ inputs.product }}"

          TV1="${GITHUB_WORKSPACE}/stacks/core/tfvars/${PLANE}.${PRODUCT}.tfvars"
          TVFALLBACK="${GITHUB_WORKSPACE}/stacks/core/tfvars/${PLANE}.tfvars"
          if [ -f "$TV1" ]; then
            TFVARS_PATH="$TV1"
          elif [ -f "$TVFALLBACK" ]; then
            TFVARS_PATH="$TVFALLBACK"
          else
            echo "❌ Missing tfvars: $TV1 (or fallback $TVFALLBACK)"; exit 1
          fi
          echo "TFVARS_PATH=$TFVARS_PATH" >> "$GITHUB_OUTPUT"

          # Same names in both clouds
          STATE_RG="rg-core-infra-state"
          STATE_SA="sacoretfstateinfra"
          STATE_CONTAINER="tfstate"
          # Key format: core/<product>/<plane>/terraform.tfstate
          STATE_KEY="core/${PRODUCT}/${PLANE}/terraform.tfstate"

          echo "STATE_RG=$STATE_RG"               >> "$GITHUB_OUTPUT"
          echo "STATE_SA=$STATE_SA"               >> "$GITHUB_OUTPUT"
          echo "STATE_CONTAINER=$STATE_CONTAINER" >> "$GITHUB_OUTPUT"
          echo "STATE_KEY=$STATE_KEY"             >> "$GITHUB_OUTPUT"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      # 1) Login to SAME CLOUD, but the **STATE** (prod) subscription — for backend init
      - name: Azure Login (state subscription for backend)
        uses: azure/login@v2
        with:
          client-id:       ${{ steps.sel.outputs.CLIENT_ID }}
          tenant-id:       ${{ steps.sel.outputs.TENANT }}
          subscription-id: ${{ steps.sel.outputs.STATE_SUB }}
          environment:     ${{ steps.sel.outputs.CLOUD_ENV }}
          audience:        ${{ steps.sel.outputs.AUDIENCE }}

      - name: Terraform Init (backend in state/prod subscription)
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID:       ${{ steps.sel.outputs.CLIENT_ID }}
          ARM_TENANT_ID:       ${{ steps.sel.outputs.TENANT }}
          ARM_SUBSCRIPTION_ID: ${{ steps.sel.outputs.STATE_SUB }}
          ARM_ENVIRONMENT:     ${{ steps.sel.outputs.ARM_ENV }}
        run: |
          terraform init -input=false -reconfigure \
            -backend-config="environment=${{ steps.sel.outputs.ARM_ENV }}" \
            -backend-config="tenant_id=${{ steps.sel.outputs.TENANT }}" \
            -backend-config="subscription_id=${{ steps.sel.outputs.STATE_SUB }}" \
            -backend-config="resource_group_name=${{ steps.paths.outputs.STATE_RG }}" \
            -backend-config="storage_account_name=${{ steps.paths.outputs.STATE_SA }}" \
            -backend-config="container_name=${{ steps.paths.outputs.STATE_CONTAINER }}" \
            -backend-config="key=${{ steps.paths.outputs.STATE_KEY }}" \
            -backend-config="use_azuread_auth=true"

      # 2) Switch login to the **TARGET** subscription for providers (plan/apply)
      - name: Azure Login (target subscription for deploy)
        uses: azure/login@v2
        with:
          client-id:       ${{ steps.sel.outputs.CLIENT_ID }}
          tenant-id:       ${{ steps.sel.outputs.TENANT }}
          subscription-id: ${{ steps.sel.outputs.TARGET_SUB }}
          environment:     ${{ steps.sel.outputs.CLOUD_ENV }}
          audience:        ${{ steps.sel.outputs.AUDIENCE }}

      - name: Terraform Fmt
        run: terraform fmt -recursive

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        if: ${{ !inputs.destroy }}
        run: |
          terraform plan -input=false -lock-timeout=5m \
            -var-file="${{ steps.paths.outputs.TFVARS_PATH }}" \
            -var "product=${{ inputs.product }}" \
            -var "plane=${{ inputs.plane }}" \
            -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Upload plan
        if: ${{ !inputs.destroy }}
        uses: actions/upload-artifact@v4
        with:
          name: core-tfplan-${{ github.run_id }}
          if-no-files-found: error
          path: |
            ${{ github.workspace }}/stacks/core/tfplan
            ${{ github.workspace }}/stacks/core/plan.txt

      - name: Terraform Apply
        if: ${{ inputs.apply && !inputs.destroy }}
        run: terraform apply -auto-approve tfplan

      - name: Terraform Destroy (danger)
        if: ${{ inputs.destroy }}
        run: |
          terraform destroy -auto-approve -lock-timeout=5m \
            -var-file="${{ steps.paths.outputs.TFVARS_PATH }}" \
            -var "product=${{ inputs.product }}" \
            -var "plane=${{ inputs.plane }}"
