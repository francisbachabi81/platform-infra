name: shared-network-deploy
run-name: ${{ format('{0}-{1}-{2} {3}', github.workflow, inputs.product, inputs.plane, (inputs.destroy && 'destroy' || (inputs.apply && 'apply' || 'plan'))) }}

on:
  workflow_dispatch:
    inputs:
      plane:
        description: "Plane to deploy (shared across envs)"
        type: choice
        options: [nonprod, prod]
        default: nonprod
      product:
        description: "Product (hrz = Azure Gov, pub = Azure Commercial)"
        type: choice
        options: [hrz, pub]
        default: hrz
      apply:
        description: "Apply changes"
        type: boolean
        default: false
      destroy:
        description: "Destroy resources (danger)"
        type: boolean
        default: false
      terraform_version:
        description: "Terraform version"
        type: string
        default: "1.13.3"

permissions:
  id-token: write
  contents: read

env:
  ARM_USE_OIDC: true
  TF_IN_AUTOMATION: true

jobs:
  terraform:
    name: "Terraform (shared-network: ${{ inputs.plane }}.${{ inputs.product }})"
    runs-on: ubuntu-latest
    environment: ${{ inputs.plane }}
    defaults:
      run:
        working-directory: stacks/shared-network

    steps:
      - uses: actions/checkout@v4

      # Select cloud/tenant/subscription/client-id by product × plane (Option A)
      - name: Select cloud/tenant/subscription
        id: subsel
        shell: bash
        run: |
          set -euo pipefail
          PLANE="${{ inputs.plane }}"
          PRODUCT="${{ inputs.product }}"
    
          if [ "$PRODUCT" = "hrz" ]; then
            CLOUD_ENV="AzureUSGovernment"
            ARM_ENV="usgovernment"
            TENANT="${{ secrets.AZ_TENANT_HRZ }}"
            CLIENT_ID="${{ secrets.AZURE_CLIENT_ID_HRZ }}"
            AUDIENCE="api://AzureADTokenExchangeUSGov"
            case "$PLANE" in
              nonprod) SUB="${{ secrets.AZ_SUB_HRZ_HUB_NONPROD }}";;
              prod)    SUB="${{ secrets.AZ_SUB_HRZ_HUB_PROD }}";;
              *) echo "Unknown plane: $PLANE"; exit 1;;
            esac
          else
            CLOUD_ENV="AzureCloud"
            ARM_ENV="public"
            TENANT="${{ secrets.AZ_TENANT_PUB }}"
            CLIENT_ID="${{ secrets.AZURE_CLIENT_ID_PUB }}"
            AUDIENCE="api://AzureADTokenExchange"
            case "$PLANE" in
              nonprod) SUB="${{ secrets.AZ_SUB_PUB_HUB_NONPROD }}";;
              prod)    SUB="${{ secrets.AZ_SUB_PUB_HUB_PROD }}";;
              *) echo "Unknown plane: $PLANE"; exit 1;;
            esac
          fi
    
          echo "CLOUD_ENV=$CLOUD_ENV" >> $GITHUB_OUTPUT
          echo "ARM_ENV=$ARM_ENV"     >> $GITHUB_OUTPUT
          echo "TENANT=$TENANT"       >> $GITHUB_OUTPUT
          echo "SUB=$SUB"             >> $GITHUB_OUTPUT
          echo "CLIENT_ID=$CLIENT_ID" >> $GITHUB_OUTPUT
          echo "AUDIENCE=$AUDIENCE"   >> $GITHUB_OUTPUT
    
          {
            echo "ARM_ENVIRONMENT=$ARM_ENV"
            echo "ARM_TENANT_ID=$TENANT"
            echo "ARM_SUBSCRIPTION_ID=$SUB"
            echo "TF_VAR_tenant_id=$TENANT"
            echo "TF_VAR_subscription_id=$SUB"
            echo "TF_VAR_product=${{ inputs.product }}"

            # NEW: always set hub_* to selected account for the plane
            echo "TF_VAR_hub_tenant_id=$TENANT"
            echo "TF_VAR_hub_subscription_id=$SUB"

            # Optional convenience: explicitly null per-env overrides unless provided via tfvars
            echo "TF_VAR_dev_subscription_id="
            echo "TF_VAR_dev_tenant_id="
            echo "TF_VAR_qa_subscription_id="
            echo "TF_VAR_qa_tenant_id="
            echo "TF_VAR_uat_subscription_id="
            echo "TF_VAR_uat_tenant_id="
            echo "TF_VAR_prod_subscription_id="
            echo "TF_VAR_prod_tenant_id="
          } >> $GITHUB_ENV
    
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id:       ${{ steps.subsel.outputs.CLIENT_ID }}
          tenant-id:       ${{ steps.subsel.outputs.TENANT }}
          subscription-id: ${{ steps.subsel.outputs.SUB }}
          environment:     ${{ steps.subsel.outputs.CLOUD_ENV }}
          audience:        ${{ steps.subsel.outputs.AUDIENCE }}

      # Resolve tfvars & backend (state split by product, key by plane)
      - name: Resolve tfvars & backend
        id: paths
        shell: bash
        run: |
          set -euo pipefail
          PLANE="${{ inputs.plane }}"
          PRODUCT="${{ inputs.product }}"

          # Prefer plane.product.tfvars; fallback to plane.tfvars
          TV1="${GITHUB_WORKSPACE}/stacks/shared-network/tfvars/${PLANE}.${PRODUCT}.tfvars"
          TVFALLBACK="${GITHUB_WORKSPACE}/stacks/shared-network/tfvars/${PLANE}.tfvars"
          if [ -f "$TV1" ]; then
            TFVARS_PATH="$TV1"
          elif [ -f "$TVFALLBACK" ]; then
            TFVARS_PATH="$TVFALLBACK"
          else
            echo "❌ Missing tfvars: $TV1 (or fallback $TVFALLBACK)"; exit 1
          fi
          echo "TFVARS_PATH=$TFVARS_PATH" >> "$GITHUB_OUTPUT"

          # Backend SA/RG per product (customize if you keep separate gov/com state stores)
          STATE_RG="rg-core-infra-state"
          STATE_SA="sacoretfstateinfra"
          if [ "$PRODUCT" != "pub" ]; then
            STATE_RG="rg-core-infra-state"
            STATE_SA="sacoretfstateinfra"
          fi

          # Key pattern by plane — matches platform-app's remote_state lookup
          STATE_KEY="shared-network/${PLANE}/terraform.tfstate"

          echo "STATE_RG=$STATE_RG"   >> "$GITHUB_OUTPUT"
          echo "STATE_SA=$STATE_SA"   >> "$GITHUB_OUTPUT"
          echo "STATE_KEY=$STATE_KEY" >> "$GITHUB_OUTPUT"

          echo "Selected tfvars: $TFVARS_PATH"
          echo "Backend: $STATE_RG / $STATE_SA ($STATE_KEY)"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform Init
        run: |
          terraform init -input=false -reconfigure \
            -backend-config="resource_group_name=${{ steps.paths.outputs.STATE_RG }}" \
            -backend-config="storage_account_name=${{ steps.paths.outputs.STATE_SA }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=${{ steps.paths.outputs.STATE_KEY }}" \
            -backend-config="use_azuread_auth=true"

      - name: Terraform Fmt
        run: terraform fmt -recursive

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        if: ${{ !inputs.destroy }}
        run: |
          terraform plan -input=false -lock-timeout=5m \
            -var-file="${{ steps.paths.outputs.TFVARS_PATH }}" \
            -var "product=${{ inputs.product }}" \
            -var "plane=${{ inputs.plane }}" \
            -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Upload plan
        if: ${{ !inputs.destroy }}
        uses: actions/upload-artifact@v4
        with:
          name: shared-network-tfplan-${{ github.run_id }}
          if-no-files-found: error
          path: |
            ${{ github.workspace }}/stacks/shared-network/tfplan
            ${{ github.workspace }}/stacks/shared-network/plan.txt

      - name: Terraform Apply
        if: ${{ inputs.apply && !inputs.destroy }}
        run: terraform apply -auto-approve tfplan

      - name: Terraform Destroy (danger)
        if: ${{ inputs.destroy }}
        run: |
          terraform destroy -auto-approve -lock-timeout=5m \
            -var-file="${{ steps.paths.outputs.TFVARS_PATH }}" \
            -var "product=${{ inputs.product }}" \
            -var "plane=${{ inputs.plane }}"
