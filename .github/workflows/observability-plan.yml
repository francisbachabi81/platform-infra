name: "Plan | Observability"
run-name: "${{ format('🧩 {0} | {1}-{2} | {3} | #{4}', github.workflow, inputs.product, inputs.env, github.ref_name, github.run_number) }}"

concurrency:
  group: plan-observability-${{ inputs.product }}-${{ inputs.env }}-${{ github.ref }}
  cancel-in-progress: true

env:
  ARM_USE_OIDC: true
  TF_IN_AUTOMATION: true
  APPROVERS_CSV: "francisbachabi81,user2"

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Environment"
        type: choice
        options: [dev, qa, uat, prod]
        default: dev
      product:
        description: "Product"
        type: choice
        options: [hrz, pub]
        default: hrz
      terraform_version:
        description: "Terraform version"
        type: string
        default: "1.13.3"

permissions:
  id-token: write
  contents: read
  issues: write

jobs:
  plan:
    name: "Plan (observability: ${{ inputs.env }}.${{ inputs.product }})"
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    defaults:
      run:
        working-directory: stacks/observability

    steps:
      - uses: actions/checkout@v4

      - name: Determine Terraform version
        id: tfver
        shell: bash
        run: |
          TV="${{ inputs.terraform_version }}"
          if [ -z "$TV" ]; then TV="1.13.3"; fi
          echo "version=$TV" >> "$GITHUB_OUTPUT"

      # Cache TF plugins for faster runs
      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
          key: tf-${{ runner.os }}-${{ steps.tfver.outputs.version }}

      - name: Configure Terraform plugin cache dir
        shell: bash
        run: |
          mkdir -p ~/.terraform.d/plugin-cache
          echo 'plugin_cache_dir="~/.terraform.d/plugin-cache"' > ~/.terraformrc

      - name: Select cloud + subscriptions
        id: sel
        shell: bash
        run: |
          set -euo pipefail
          ENV_IN="${{ inputs.env }}"
          PRODUCT="${{ inputs.product }}"
      
          case "$ENV_IN" in
            dev|qa)   PLANE="nonprod" ;;
            uat|prod) PLANE="prod"    ;;
            *) echo "Unknown env: $ENV_IN"; exit 1 ;;
          esac
      
          if [ "$PRODUCT" = "hrz" ]; then
            CLOUD_ENV="AzureUSGovernment"; ARM_ENV="usgovernment"
            TENANT_RAW='${{ secrets.AZ_TENANT_HRZ }}'
            CLIENT_ID_RAW='${{ secrets.AZURE_CLIENT_ID_HRZ }}'
            AUDIENCE="api://AzureADTokenExchangeUSGov"
            STATE_SUB_RAW='${{ secrets.AZ_SUB_STATE_HRZ != '' && secrets.AZ_SUB_STATE_HRZ || secrets.AZ_SUB_HRZ_PROD }}'
            CORE_SUB_RAW='${{ secrets.AZ_SUB_HRZ_CORE }}'
            TARGET_SUB_RAW=$([ "$PLANE" = "prod" ] && echo '${{ secrets.AZ_SUB_HRZ_PROD }}' || echo '${{ secrets.AZ_SUB_HRZ_NONPROD }}')
          else
            CLOUD_ENV="AzureCloud"; ARM_ENV="public"
            TENANT_RAW='${{ secrets.AZ_TENANT_PUB }}'
            CLIENT_ID_RAW='${{ secrets.AZURE_CLIENT_ID_PUB }}'
            AUDIENCE="api://AzureADTokenExchange"
            STATE_SUB_RAW='${{ secrets.AZ_SUB_STATE_PUB != '' && secrets.AZ_SUB_STATE_PUB || secrets.AZ_SUB_PUB_PROD }}'
            CORE_SUB_RAW='${{ secrets.AZ_SUB_PUB_CORE }}'
            TARGET_SUB_RAW=$([ "$PLANE" = "prod" ] && echo '${{ secrets.AZ_SUB_PUB_PROD }}' || echo '${{ secrets.AZ_SUB_PUB_NONPROD }}')
          fi
      
          # strip whitespace/newlines that cause 404/InvalidSubscriptionId
          TENANT=$(printf "%s" "$TENANT_RAW" | tr -d '[:space:]')
          CLIENT_ID=$(printf "%s" "$CLIENT_ID_RAW" | tr -d '[:space:]')
          STATE_SUB=$(printf "%s" "$STATE_SUB_RAW" | tr -d '[:space:]')
          CORE_SUB=$(printf "%s" "$CORE_SUB_RAW"   | tr -d '[:space:]')
          TARGET_SUB=$(printf "%s" "$TARGET_SUB_RAW" | tr -d '[:space:]')
      
          echo "ENV=$ENV_IN"            >> $GITHUB_OUTPUT
          echo "PRODUCT=$PRODUCT"       >> $GITHUB_OUTPUT
          echo "PLANE=$PLANE"           >> $GITHUB_OUTPUT
          echo "CLOUD_ENV=$CLOUD_ENV"   >> $GITHUB_OUTPUT
          echo "ARM_ENV=$ARM_ENV"       >> $GITHUB_OUTPUT
          echo "TENANT=$TENANT"         >> $GITHUB_OUTPUT
          echo "CLIENT_ID=$CLIENT_ID"   >> $GITHUB_OUTPUT
          echo "AUDIENCE=$AUDIENCE"     >> $GITHUB_OUTPUT
          echo "STATE_SUB=$STATE_SUB"   >> $GITHUB_OUTPUT
          echo "CORE_SUB=$CORE_SUB"     >> $GITHUB_OUTPUT
          echo "TARGET_SUB=$TARGET_SUB" >> $GITHUB_OUTPUT
      
          {
            echo "ARM_ENVIRONMENT=$ARM_ENV"
            echo "ARM_TENANT_ID=$TENANT"
            echo "ARM_CLIENT_ID=$CLIENT_ID"
      
            # Providers in TF read only these:
            echo "TF_VAR_core_tenant_id=$TENANT"
            echo "TF_VAR_core_subscription_id=$CORE_SUB"
            echo "TF_VAR_env_tenant_id=$TENANT"
            echo "TF_VAR_env_subscription_id=$TARGET_SUB"
      
            # module/locals convenience
            echo "TF_VAR_product=$PRODUCT"
            echo "TF_VAR_env=$ENV_IN"
            echo "TF_VAR_plane=$PLANE"
          } >> $GITHUB_ENV

      - name: Debug subs used by TF providers
        run: |
          echo "ENV sub:    $TF_VAR_env_subscription_id"
          echo "CORE sub:   $TF_VAR_core_subscription_id"
          echo "Tenant:     $TF_VAR_env_tenant_id"

      - name: Resolve tfvars & backend key (env-based)
        id: paths
        shell: bash
        run: |
          set -euo pipefail
          ENV="${{ steps.sel.outputs.ENV }}"
          PRODUCT="${{ steps.sel.outputs.PRODUCT }}"

          TFVARS_DIR="${GITHUB_WORKSPACE}/stacks/observability/tfvars"
          echo "🔎 Listing $TFVARS_DIR:"; ls -la "$TFVARS_DIR" || true

          candidates=(
            "${ENV}.${PRODUCT}.tfvars"  # e.g., dev.hrz.tfvars
            "${ENV}.tfvars"
            "default.${ENV}.tfvars"
            "default.tfvars"
          )

          TFVARS_PATH=""
          for f in "${candidates[@]}"; do
            if [ -f "${TFVARS_DIR}/${f}" ]; then
              TFVARS_PATH="${TFVARS_DIR}/${f}"
              echo "✅ Using tfvars: ${f}"
              break
            fi
          done

          [ -n "${TFVARS_PATH}" ] || { echo "❌ Missing tfvars. Tried: ${candidates[*]}"; exit 1; }

          echo "TFVARS_PATH=$TFVARS_PATH" >> "$GITHUB_OUTPUT"
          echo "STATE_RG=rg-core-infra-state"     >> "$GITHUB_OUTPUT"
          echo "STATE_SA=sacoretfstateinfra"      >> "$GITHUB_OUTPUT"
          echo "STATE_CONTAINER=tfstate"          >> "$GITHUB_OUTPUT"
          echo "STATE_KEY=observability/${PRODUCT}/${ENV}/terraform.tfstate" >> "$GITHUB_OUTPUT"

      - name: Export remote-state vars to Terraform
        shell: bash
        run: |
          echo "TF_VAR_state_rg=${{ steps.paths.outputs.STATE_RG }}" >> $GITHUB_ENV
          echo "TF_VAR_state_sa=${{ steps.paths.outputs.STATE_SA }}" >> $GITHUB_ENV
          echo "TF_VAR_state_container=${{ steps.paths.outputs.STATE_CONTAINER }}" >> $GITHUB_ENV

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ steps.tfver.outputs.version }}

      - name: Azure Login (state subscription for backend)
        uses: azure/login@v2
        with:
          client-id:       ${{ steps.sel.outputs.CLIENT_ID }}
          tenant-id:       ${{ steps.sel.outputs.TENANT }}
          subscription-id: ${{ steps.sel.outputs.STATE_SUB }}
          environment:     ${{ steps.sel.outputs.CLOUD_ENV }}
          audience:        ${{ steps.sel.outputs.AUDIENCE }}

      - name: Terraform Init (backend in state/prod subscription)
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID:       ${{ steps.sel.outputs.CLIENT_ID }}
          ARM_TENANT_ID:       ${{ steps.sel.outputs.TENANT }}
          ARM_SUBSCRIPTION_ID: ${{ steps.sel.outputs.STATE_SUB }}
          ARM_ENVIRONMENT:     ${{ steps.sel.outputs.ARM_ENV }}
        run: |
          terraform init -input=false -reconfigure \
            -backend-config="environment=${{ steps.sel.outputs.ARM_ENV }}" \
            -backend-config="tenant_id=${{ steps.sel.outputs.TENANT }}" \
            -backend-config="subscription_id=${{ steps.sel.outputs.STATE_SUB }}" \
            -backend-config="resource_group_name=${{ steps.paths.outputs.STATE_RG }}" \
            -backend-config="storage_account_name=${{ steps.paths.outputs.STATE_SA }}" \
            -backend-config="container_name=${{ steps.paths.outputs.STATE_CONTAINER }}" \
            -backend-config="key=${{ steps.paths.outputs.STATE_KEY }}" \
            -backend-config="use_azuread_auth=true"

      - name: Azure Login (target subscription for plan)
        uses: azure/login@v2
        with:
          client-id:       ${{ steps.sel.outputs.CLIENT_ID }}
          tenant-id:       ${{ steps.sel.outputs.TENANT }}
          subscription-id: ${{ steps.sel.outputs.TARGET_SUB }}
          environment:     ${{ steps.sel.outputs.CLOUD_ENV }}
          audience:        ${{ steps.sel.outputs.AUDIENCE }}

      - name: Terraform Fmt & Validate
        run: |
          terraform fmt -recursive
          terraform validate

      - name: Plan (detailed exit code)
        id: plan
        shell: bash
        run: |
          set -euo pipefail
          set +e
          terraform plan -input=false -lock-timeout=5m \
            -var-file="${{ steps.paths.outputs.TFVARS_PATH }}" \
            -var "product=${{ steps.sel.outputs.PRODUCT }}" \
            -var "env=${{ steps.sel.outputs.ENV }}" \
            -detailed-exitcode -out=tfplan
          ec=$?
          set -e

          echo "exitcode=${ec}" >> "$GITHUB_OUTPUT"
          if [ "${ec}" -eq 1 ]; then
            echo "Terraform plan failed (exit 1). Failing the job."
            exit 1
          fi

          terraform show -no-color tfplan > plan.txt

      - name: Sanity check plan output (no embedded errors)
        if: ${{ steps.plan.outputs.exitcode == '0' || steps.plan.outputs.exitcode == '2' }}
        shell: bash
        run: |
          if grep -q '^Error:' plan.txt; then
            echo "Found 'Error:' lines in plan.txt; failing."
            exit 1
          fi

      - name: Summarize plan
        id: summary
        shell: bash
        run: |
          set -euo pipefail
          if grep -qE "^(No changes|No changes\.)" plan.txt; then
            SUM="No changes. Infrastructure is up-to-date."
          else
            SUM="$(grep -E '^Plan: ' plan.txt | tail -n1 || true)"
            if [ -z "${SUM}" ]; then
              SUM="(No 'Plan:' line found)"; echo "::group::Plan tail"; tail -n 10 plan.txt; echo "::endgroup::"
            fi
          fi
          echo "summary=${SUM}" >> "$GITHUB_OUTPUT"
          {
            echo "## Terraform plan summary"
            echo
            echo "${SUM}"
            echo
            echo "[View full run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            echo
            echo "Artifact: \`observability-plan-${{ github.run_id }}\`"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Show plan exit code & outputs
        run: |
          echo "exitcode='${{ steps.plan.outputs.exitcode }}'"
          echo "summary='${{ steps.summary.outputs.summary }}'"

      - name: Parse plan JSON for changes
        id: parse
        if: ${{ steps.plan.outputs.exitcode == '0' || steps.plan.outputs.exitcode == '2' }}
        shell: bash
        run: |
          set -euo pipefail
          terraform show -json tfplan > plan.json

          # Count non-noop resource changes (add/update/destroy/replace)
          COUNT=$(jq '[.resource_changes[] | select((.change.actions | index("no-op")) | not)] | length' plan.json)
          echo "changes_count=${COUNT}" >> "$GITHUB_OUTPUT"

          if [ "${COUNT}" -gt 0 ]; then
            echo "has_changes=true"  >> "$GITHUB_OUTPUT"
          else
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          fi

          # Guardrail: if Terraform exitcode says 0 but we detected changes, force a “needs approval” path
          if [ "${COUNT}" -gt 0 ] && [ "${{ steps.plan.outputs.exitcode }}" = "0" ]; then
            echo "::warning::Detected changes from JSON but exitcode=0; will treat as changes."
          fi

      - name: Upload plan
        if: ${{ steps.plan.outputs.exitcode == '2' || steps.parse.outputs.has_changes == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: observability-plan-${{ github.run_id }}
          if-no-files-found: error
          path: |
            ${{ github.workspace }}/stacks/observability/tfplan
            ${{ github.workspace }}/stacks/observability/plan.txt
            ${{ github.workspace }}/stacks/observability/plan.json

      - name: Verify issues are enabled
        if: ${{ steps.plan.outputs.exitcode == '2' || steps.parse.outputs.has_changes == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            ${{ github.api_url }}/repos/${{ github.repository }} \
            | jq -re '.has_issues' | grep -q true || \
            { echo "::error::Issues are disabled on this repo"; exit 1; }

      - name: Open approval issue
        if: ${{ steps.plan.outputs.exitcode == '2' || steps.parse.outputs.has_changes == 'true' }}
        uses: actions/github-script@v7
        env:
          APPROVERS_CSV: ${{ env.APPROVERS_CSV }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const envVal = `${{ steps.sel.outputs.ENV }}`;
              const product = `${{ steps.sel.outputs.PRODUCT }}`;
              const runUrl = `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
              const planSummary = `${{ steps.summary.outputs.summary }}`;
              const stateKey   = `${{ steps.paths.outputs.STATE_KEY }}`;

              const firstApprover = (process.env.APPROVERS_CSV || '')
                .split(',')
                .map(s => s.trim())
                .filter(Boolean)[0];

              const branch   = (context.ref || '').replace('refs/heads/', '') || 'detached';
              const shortSha = (context.sha || '').slice(0, 7);
              const runNum   = context.runNumber;

              const title = `APPROVAL: observability | ${product}-${envVal} | ${branch} | #${runNum} | run ${context.runId} (${shortSha})`;

              const body = `
              **Plan ready**
              - **Stack:** observability
              - **Product:** ${product}
              - **Env:** ${envVal}
              - **Branch:** ${context.ref}
              - **Commit:** ${context.sha}
              - **Run:** ${runUrl}
              - **State key:** \`${stateKey}\`

              **Summary:** ${planSummary}

              **Artifact:** \`observability-plan-${context.runId}\`
              **JSON:** \`plan.json\`

              **Approve by commenting:** \`/approve ${context.runId}\`  
              **Reject by commenting:** \`/reject ${context.runId}\`
              `;

              const resp = await github.rest.issues.create({
                ...context.repo,
                title,
                body,
                assignees: firstApprover ? [firstApprover] : undefined,
                labels: [
                  'stack:observability',
                  `product:${product}`,
                  `env:${envVal}`,
                  `branch:${branch}`
                ]
              });
              core.info(`Created issue #${resp.data.number}`);
            } catch (e) {
              core.setFailed(`Failed to create issue: ${e.message}`);
            }
      # - name: Guardrail - detect mismatch between exit code and JSON
      #   if: ${{ steps.plan.outputs.exitcode == '0' && steps.parse.outputs.has_changes == 'true' }}
      #   run: |
      #     echo "::error::Terraform returned exitcode=0 (no changes) but plan.json shows changes. Please investigate."
      #     exit 1
      - name: Guardrail - detect mismatch between exit code and JSON
        id: guard
        if: ${{ steps.plan.outputs.exitcode == '0' && steps.parse.outputs.has_changes == 'true' }}
        shell: bash
        run: |
          echo "mismatch=true" >> "$GITHUB_OUTPUT"
          echo "::warning::Terraform returned exitcode=0 (no changes) but plan.json shows changes. Treating as 'changes present'."
